package cg.algorithmsUnitTest;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;

import cg.algorithms.Algorithm;
import cg.utilities.Line;
import cg.utilities.Point;
import cg.utilities.Polygon;

public class ConvexHullTest {

	protected Algorithm convexHullTester;
	protected List<Point> inputPoints;
	protected List<Point> outputPoints;
	protected List<Point> desiredPoints;
	protected List<Line> inputLines;
	protected List<Line> outputLines;
	protected List<Polygon> inputPolygons;
	protected List<Polygon> outputPolygons;

	@Before
	public void InitializeData() {

		inputPoints = new ArrayList<>();
		outputPoints = new ArrayList<>();
		inputLines = new ArrayList<>();
		outputLines = new ArrayList<>();
		desiredPoints = new ArrayList<>();
		inputPolygons = new ArrayList<>();
		outputPolygons = new ArrayList<>();
	}

	// #region Cases
	public void Case1() {

		// #region Case 1 (Signle Point):
		inputPoints.add(new Point(0, 0));
		desiredPoints.add(new Point(0, 0));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in " + convexHullTester.toString() + ": Case 1 (Signle Point)", success);
		// #endregion
	}

	public void Case2() {

		// #region Case 2 (2 points Line):
		inputPoints.add(new Point(0, 5));
		inputPoints.add(new Point(7, 10));

		desiredPoints.add(new Point(0, 5));
		desiredPoints.add(new Point(7, 10));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 2 (2 points Line)", success);
		// #endregion
	}

	public void Case3() {

		// #region Case 3 (triangle):
		inputPoints.add(new Point(1, 4));
		inputPoints.add(new Point(2, 0));
		inputPoints.add(new Point(3, 2));

		desiredPoints.add(new Point(2, 0));
		desiredPoints.add(new Point(3, 2));
		desiredPoints.add(new Point(1, 4));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 3 (triangle)", success);
		// #endregion
	}

	public void Case4() {

		// #region Case 4 (triangle with 2 points with the same y-coordinate):

		inputPoints.add(new Point(1, 1));
		inputPoints.add(new Point(2, 2));
		inputPoints.add(new Point(3, 1));

		desiredPoints.add(new Point(1, 1));
		desiredPoints.add(new Point(3, 1));
		desiredPoints.add(new Point(2, 2));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 4 (triangle with 2 points with the same y-coordinate)", success);
		// #endregion
	}

	public void Case5() {

		// #region Case 5 (7 points on the same line):

		inputPoints.add(new Point(0, 0));
		inputPoints.add(new Point(1, 0));
		inputPoints.add(new Point(2, 0));
		inputPoints.add(new Point(3, 0));
		inputPoints.add(new Point(10, 0));
		inputPoints.add(new Point(100, 0));
		inputPoints.add(new Point(101, 0));

		desiredPoints.add(new Point(0, 0));
		desiredPoints.add(new Point(101, 0));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 5 (7 points on the same line)", success);

		// #endregion
	}

	public void Case6() {

		// #region Case 6 (line with an exception)

		inputPoints.add(new Point(0, 0));
		inputPoints.add(new Point(1, 0));
		inputPoints.add(new Point(2, 0));
		inputPoints.add(new Point(3, 0));
		inputPoints.add(new Point(5, 1));
		inputPoints.add(new Point(10, 0));
		inputPoints.add(new Point(100, 0));
		inputPoints.add(new Point(101, 0));

		desiredPoints.add(new Point(0, 0));
		desiredPoints.add(new Point(101, 0));
		desiredPoints.add(new Point(5, 1));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 6 (line with an exception)", success);

		// #endregion
	}

	public void Case7() {

		// #region Case 7 (line with two points on opposite sides)

		inputPoints.add(new Point(0, 1));
		inputPoints.add(new Point(1, 1));
		inputPoints.add(new Point(2, 1));
		inputPoints.add(new Point(3, 1));
		inputPoints.add(new Point(5, 2));
		inputPoints.add(new Point(7, 0));
		inputPoints.add(new Point(10, 1));
		inputPoints.add(new Point(100, 1));
		inputPoints.add(new Point(101, 1));

		desiredPoints.add(new Point(7, 0));
		desiredPoints.add(new Point(101, 1));
		desiredPoints.add(new Point(5, 2));
		desiredPoints.add(new Point(0, 1));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 7 (line with two points on opposite sides)", success);

		// #endregion
	}

	public void Case8() {

		// #region Case 8 (convex hull with one interior point)

		inputPoints.add(new Point(1, 3));
		inputPoints.add(new Point(2, 1));
		inputPoints.add(new Point(4, 1));
		inputPoints.add(new Point(3, 3));
		inputPoints.add(new Point(3, 6));
		inputPoints.add(new Point(5, 5));
		inputPoints.add(new Point(6, 2));

		desiredPoints.add(new Point(2, 1));
		desiredPoints.add(new Point(4, 1));
		desiredPoints.add(new Point(6, 2));
		desiredPoints.add(new Point(5, 5));
		desiredPoints.add(new Point(3, 6));
		desiredPoints.add(new Point(1, 3));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 8 (convex hull with one interior point)", success);

		// #endregion
	}

	public void Case9() {

		// #region Case 9 (random convex hull, Source:
		// http://stackoverflow.com/questions/482278/test-case-data-for-convex-hull)

		inputPoints.add(new Point(16, 16));
		inputPoints.add(new Point(16, 2));
		inputPoints.add(new Point(2, 2));
		inputPoints.add(new Point(2, 16));
		inputPoints.add(new Point(18, 9));
		inputPoints.add(new Point(0, 9));
		inputPoints.add(new Point(9, 18));
		inputPoints.add(new Point(9, 0));

		desiredPoints.add(new Point(9, 0));
		desiredPoints.add(new Point(16, 2));
		desiredPoints.add(new Point(18, 9));
		desiredPoints.add(new Point(16, 16));
		desiredPoints.add(new Point(9, 18));
		desiredPoints.add(new Point(2, 16));
		desiredPoints.add(new Point(0, 9));
		desiredPoints.add(new Point(2, 2));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue(
				"Fails in Extreme Points: Case 9 (random convex hull, Source: http://stackoverflow.com/questions/482278/test-case-data-for-convex-hull)",
				success);

		// #endregion
	}

	public void Case10() {

		// #region Case 10 (random points, Source:
		// http://stackoverflow.com/questions/482278/test-case-data-for-convex-hull)

		inputPoints.add(new Point(16, 16));
		inputPoints.add(new Point(16, 2));
		inputPoints.add(new Point(2, 2));
		inputPoints.add(new Point(2, 16));
		inputPoints.add(new Point(18, 9));
		inputPoints.add(new Point(0, 9));
		inputPoints.add(new Point(9, 18));
		inputPoints.add(new Point(9, 0));
		inputPoints.add(new Point(9, 9));
		inputPoints.add(new Point(10, 11));
		inputPoints.add(new Point(7, 10));
		inputPoints.add(new Point(8, 8));
		inputPoints.add(new Point(12, 13));
		inputPoints.add(new Point(13, 12));
		inputPoints.add(new Point(4, 13));
		inputPoints.add(new Point(15, 14));

		desiredPoints.add(new Point(9, 0));
		desiredPoints.add(new Point(16, 2));
		desiredPoints.add(new Point(18, 9));
		desiredPoints.add(new Point(16, 16));
		desiredPoints.add(new Point(9, 18));
		desiredPoints.add(new Point(2, 16));
		desiredPoints.add(new Point(0, 9));
		desiredPoints.add(new Point(2, 2));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue(
				"Fails in Extreme Points: Case 10 (random points, Source: http://stackoverflow.com/questions/482278/test-case-data-for-convex-hull)",
				success);

		// #endregion
	}

	public void Case11() {

		// #region Case 11 (convex hull with alot of interior points, Source:
		// http://stackoverflow.com/questions/482278/test-case-data-for-convex-hull):

		inputPoints.add(new Point(9, 9));
		inputPoints.add(new Point(10, 11));
		inputPoints.add(new Point(7, 10));
		inputPoints.add(new Point(8, 8));
		inputPoints.add(new Point(12, 13));
		inputPoints.add(new Point(13, 12));
		inputPoints.add(new Point(4, 13));
		inputPoints.add(new Point(15, 14));
		inputPoints.add(new Point(16, 16));
		inputPoints.add(new Point(16, 2));
		inputPoints.add(new Point(2, 2));
		inputPoints.add(new Point(2, 16));
		inputPoints.add(new Point(18, 9));
		inputPoints.add(new Point(0, 9));
		inputPoints.add(new Point(9, 18));
		inputPoints.add(new Point(9, 0));
		inputPoints.add(new Point(1, 9));
		inputPoints.add(new Point(17, 9));
		inputPoints.add(new Point(2, 9));
		inputPoints.add(new Point(16, 9));
		inputPoints.add(new Point(3, 9));
		inputPoints.add(new Point(15, 9));
		inputPoints.add(new Point(4, 9));
		inputPoints.add(new Point(14, 9));
		inputPoints.add(new Point(5, 9));
		inputPoints.add(new Point(13, 9));
		inputPoints.add(new Point(6, 9));
		inputPoints.add(new Point(12, 9));
		inputPoints.add(new Point(7, 9));
		inputPoints.add(new Point(11, 9));
		inputPoints.add(new Point(8, 9));
		inputPoints.add(new Point(10, 9));
		inputPoints.add(new Point(9, 1));
		inputPoints.add(new Point(9, 17));
		inputPoints.add(new Point(9, 2));
		inputPoints.add(new Point(9, 16));
		inputPoints.add(new Point(9, 3));
		inputPoints.add(new Point(9, 15));
		inputPoints.add(new Point(9, 4));
		inputPoints.add(new Point(9, 14));
		inputPoints.add(new Point(9, 5));
		inputPoints.add(new Point(9, 13));
		inputPoints.add(new Point(9, 6));
		inputPoints.add(new Point(9, 12));
		inputPoints.add(new Point(9, 7));
		inputPoints.add(new Point(9, 11));
		inputPoints.add(new Point(9, 8));
		inputPoints.add(new Point(9, 10));
		inputPoints.add(new Point(10, 10));
		inputPoints.add(new Point(11, 11));
		inputPoints.add(new Point(12, 12));
		inputPoints.add(new Point(13, 13));
		inputPoints.add(new Point(14, 14));
		inputPoints.add(new Point(15, 15));
		inputPoints.add(new Point(10, 8));
		inputPoints.add(new Point(11, 7));
		inputPoints.add(new Point(12, 6));
		inputPoints.add(new Point(13, 5));
		inputPoints.add(new Point(14, 4));
		inputPoints.add(new Point(15, 3));
		inputPoints.add(new Point(8, 10));
		inputPoints.add(new Point(7, 11));
		inputPoints.add(new Point(6, 12));
		inputPoints.add(new Point(5, 13));
		inputPoints.add(new Point(4, 14));
		inputPoints.add(new Point(3, 15));
		inputPoints.add(new Point(8, 8));
		inputPoints.add(new Point(7, 7));
		inputPoints.add(new Point(6, 6));
		inputPoints.add(new Point(5, 5));
		inputPoints.add(new Point(4, 4));
		inputPoints.add(new Point(3, 3));

		desiredPoints.add(new Point(9, 0));
		desiredPoints.add(new Point(16, 2));
		desiredPoints.add(new Point(18, 9));
		desiredPoints.add(new Point(16, 16));
		desiredPoints.add(new Point(9, 18));
		desiredPoints.add(new Point(2, 16));
		desiredPoints.add(new Point(0, 9));
		desiredPoints.add(new Point(2, 2));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue(
				"Fails in Extreme Points: Case 11 (convex hull with alot of interior points, Source: http://stackoverflow.com/questions/482278/test-case-data-for-convex-hull):",
				success);

		// #endregion
	}

	public void Case12() {

		// #region Case 12 (random large set of points in small range ({0, 40},
		// {0, 40}) ):

		inputPoints.add(new Point(0, 31));
		inputPoints.add(new Point(15, 34));
		inputPoints.add(new Point(25, 29));
		inputPoints.add(new Point(8, 19));
		inputPoints.add(new Point(32, 0));
		inputPoints.add(new Point(30, 11));
		inputPoints.add(new Point(29, 31));
		inputPoints.add(new Point(13, 0));
		inputPoints.add(new Point(1, 16));
		inputPoints.add(new Point(23, 28));
		inputPoints.add(new Point(18, 15));
		inputPoints.add(new Point(2, 20));
		inputPoints.add(new Point(1, 33));
		inputPoints.add(new Point(7, 31));
		inputPoints.add(new Point(38, 38));
		inputPoints.add(new Point(3, 27));
		inputPoints.add(new Point(8, 38));
		inputPoints.add(new Point(26, 25));
		inputPoints.add(new Point(22, 37));
		inputPoints.add(new Point(9, 36));
		inputPoints.add(new Point(40, 37));
		inputPoints.add(new Point(33, 24));
		inputPoints.add(new Point(24, 39));
		inputPoints.add(new Point(40, 23));
		inputPoints.add(new Point(24, 33));
		inputPoints.add(new Point(31, 28));
		inputPoints.add(new Point(21, 10));
		inputPoints.add(new Point(40, 7));
		inputPoints.add(new Point(20, 28));
		inputPoints.add(new Point(9, 8));
		inputPoints.add(new Point(17, 29));
		inputPoints.add(new Point(40, 2));
		inputPoints.add(new Point(10, 19));
		inputPoints.add(new Point(17, 5));
		inputPoints.add(new Point(34, 1));
		inputPoints.add(new Point(16, 22));
		inputPoints.add(new Point(14, 6));
		inputPoints.add(new Point(28, 33));
		inputPoints.add(new Point(3, 0));
		inputPoints.add(new Point(4, 23));
		inputPoints.add(new Point(1, 37));
		inputPoints.add(new Point(19, 34));
		inputPoints.add(new Point(29, 36));
		inputPoints.add(new Point(39, 11));
		inputPoints.add(new Point(26, 23));
		inputPoints.add(new Point(39, 6));
		inputPoints.add(new Point(10, 27));
		inputPoints.add(new Point(24, 23));
		inputPoints.add(new Point(19, 20));
		inputPoints.add(new Point(38, 11));
		inputPoints.add(new Point(19, 0));
		inputPoints.add(new Point(15, 11));
		inputPoints.add(new Point(6, 13));
		inputPoints.add(new Point(21, 25));
		inputPoints.add(new Point(0, 5));
		inputPoints.add(new Point(20, 6));
		inputPoints.add(new Point(37, 32));
		inputPoints.add(new Point(6, 17));
		inputPoints.add(new Point(27, 4));
		inputPoints.add(new Point(9, 13));
		inputPoints.add(new Point(24, 16));
		inputPoints.add(new Point(34, 33));
		inputPoints.add(new Point(16, 18));
		inputPoints.add(new Point(0, 19));
		inputPoints.add(new Point(28, 6));
		inputPoints.add(new Point(24, 37));
		inputPoints.add(new Point(10, 2));
		inputPoints.add(new Point(26, 1));
		inputPoints.add(new Point(7, 24));
		inputPoints.add(new Point(29, 14));
		inputPoints.add(new Point(24, 35));
		inputPoints.add(new Point(36, 4));
		inputPoints.add(new Point(33, 3));
		inputPoints.add(new Point(22, 30));
		inputPoints.add(new Point(26, 29));
		inputPoints.add(new Point(35, 23));
		inputPoints.add(new Point(35, 39));
		inputPoints.add(new Point(32, 5));
		inputPoints.add(new Point(11, 1));
		inputPoints.add(new Point(34, 2));
		inputPoints.add(new Point(31, 38));
		inputPoints.add(new Point(15, 19));
		inputPoints.add(new Point(4, 19));
		inputPoints.add(new Point(26, 7));
		inputPoints.add(new Point(18, 25));
		inputPoints.add(new Point(40, 35));
		inputPoints.add(new Point(25, 25));
		inputPoints.add(new Point(26, 34));
		inputPoints.add(new Point(11, 12));
		inputPoints.add(new Point(1, 10));
		inputPoints.add(new Point(19, 11));
		inputPoints.add(new Point(36, 38));
		inputPoints.add(new Point(28, 9));
		inputPoints.add(new Point(0, 35));
		inputPoints.add(new Point(31, 22));
		inputPoints.add(new Point(37, 38));
		inputPoints.add(new Point(8, 3));
		inputPoints.add(new Point(21, 17));
		inputPoints.add(new Point(11, 30));
		inputPoints.add(new Point(24, 13));
		inputPoints.add(new Point(26, 27));
		inputPoints.add(new Point(25, 22));
		inputPoints.add(new Point(23, 24));
		inputPoints.add(new Point(38, 17));
		inputPoints.add(new Point(31, 14));
		inputPoints.add(new Point(20, 34));
		inputPoints.add(new Point(13, 22));
		inputPoints.add(new Point(31, 27));
		inputPoints.add(new Point(11, 35));
		inputPoints.add(new Point(29, 15));
		inputPoints.add(new Point(32, 1));
		inputPoints.add(new Point(16, 20));
		inputPoints.add(new Point(37, 3));
		inputPoints.add(new Point(0, 25));
		inputPoints.add(new Point(12, 11));
		inputPoints.add(new Point(8, 32));
		inputPoints.add(new Point(8, 7));
		inputPoints.add(new Point(39, 15));
		inputPoints.add(new Point(14, 25));
		inputPoints.add(new Point(27, 9));
		inputPoints.add(new Point(21, 13));
		inputPoints.add(new Point(10, 16));
		inputPoints.add(new Point(18, 3));
		inputPoints.add(new Point(25, 34));
		inputPoints.add(new Point(12, 6));
		inputPoints.add(new Point(14, 28));
		inputPoints.add(new Point(19, 8));
		inputPoints.add(new Point(17, 27));
		inputPoints.add(new Point(40, 30));
		inputPoints.add(new Point(29, 32));
		inputPoints.add(new Point(15, 31));
		inputPoints.add(new Point(31, 17));
		inputPoints.add(new Point(6, 33));
		inputPoints.add(new Point(32, 36));
		inputPoints.add(new Point(38, 19));
		inputPoints.add(new Point(18, 16));
		inputPoints.add(new Point(25, 12));
		inputPoints.add(new Point(33, 29));
		inputPoints.add(new Point(2, 34));
		inputPoints.add(new Point(27, 16));
		inputPoints.add(new Point(14, 13));
		inputPoints.add(new Point(3, 38));
		inputPoints.add(new Point(16, 28));
		inputPoints.add(new Point(6, 34));
		inputPoints.add(new Point(2, 18));
		inputPoints.add(new Point(18, 19));
		inputPoints.add(new Point(3, 30));
		inputPoints.add(new Point(15, 35));
		inputPoints.add(new Point(6, 27));
		inputPoints.add(new Point(28, 29));
		inputPoints.add(new Point(21, 21));
		inputPoints.add(new Point(18, 0));
		inputPoints.add(new Point(15, 36));
		inputPoints.add(new Point(2, 35));
		inputPoints.add(new Point(32, 32));
		inputPoints.add(new Point(15, 2));
		inputPoints.add(new Point(35, 0));
		inputPoints.add(new Point(27, 21));
		inputPoints.add(new Point(30, 34));
		inputPoints.add(new Point(23, 36));
		inputPoints.add(new Point(37, 16));
		inputPoints.add(new Point(7, 35));
		inputPoints.add(new Point(14, 37));
		inputPoints.add(new Point(9, 37));
		inputPoints.add(new Point(15, 16));
		inputPoints.add(new Point(12, 5));
		inputPoints.add(new Point(11, 24));
		inputPoints.add(new Point(26, 36));
		inputPoints.add(new Point(28, 16));
		inputPoints.add(new Point(37, 31));
		inputPoints.add(new Point(18, 21));
		inputPoints.add(new Point(13, 37));
		inputPoints.add(new Point(28, 10));
		inputPoints.add(new Point(10, 18));
		inputPoints.add(new Point(11, 25));
		inputPoints.add(new Point(6, 5));
		inputPoints.add(new Point(10, 28));
		inputPoints.add(new Point(25, 20));
		inputPoints.add(new Point(6, 6));
		inputPoints.add(new Point(17, 7));
		inputPoints.add(new Point(10, 34));
		inputPoints.add(new Point(4, 26));
		inputPoints.add(new Point(23, 5));
		inputPoints.add(new Point(25, 6));
		inputPoints.add(new Point(25, 32));
		inputPoints.add(new Point(4, 40));
		inputPoints.add(new Point(21, 29));
		inputPoints.add(new Point(3, 13));
		inputPoints.add(new Point(8, 9));
		inputPoints.add(new Point(22, 23));
		inputPoints.add(new Point(4, 1));
		inputPoints.add(new Point(29, 30));
		inputPoints.add(new Point(17, 23));
		inputPoints.add(new Point(14, 9));
		inputPoints.add(new Point(13, 9));
		inputPoints.add(new Point(34, 0));
		inputPoints.add(new Point(28, 31));
		inputPoints.add(new Point(26, 4));
		inputPoints.add(new Point(36, 6));
		inputPoints.add(new Point(1, 14));
		inputPoints.add(new Point(11, 32));
		inputPoints.add(new Point(11, 40));
		inputPoints.add(new Point(30, 19));
		inputPoints.add(new Point(24, 22));
		inputPoints.add(new Point(31, 37));
		inputPoints.add(new Point(5, 4));
		inputPoints.add(new Point(36, 39));
		inputPoints.add(new Point(35, 29));
		inputPoints.add(new Point(35, 12));
		inputPoints.add(new Point(23, 18));
		inputPoints.add(new Point(28, 21));
		inputPoints.add(new Point(30, 28));
		inputPoints.add(new Point(38, 15));
		inputPoints.add(new Point(0, 12));
		inputPoints.add(new Point(14, 20));
		inputPoints.add(new Point(27, 28));
		inputPoints.add(new Point(3, 12));
		inputPoints.add(new Point(18, 14));
		inputPoints.add(new Point(25, 37));
		inputPoints.add(new Point(30, 9));
		inputPoints.add(new Point(39, 9));
		inputPoints.add(new Point(29, 29));
		inputPoints.add(new Point(25, 40));
		inputPoints.add(new Point(1, 20));
		inputPoints.add(new Point(38, 32));
		inputPoints.add(new Point(38, 23));
		inputPoints.add(new Point(15, 10));
		inputPoints.add(new Point(37, 33));
		inputPoints.add(new Point(10, 23));
		inputPoints.add(new Point(32, 25));
		inputPoints.add(new Point(5, 36));
		inputPoints.add(new Point(38, 4));
		inputPoints.add(new Point(19, 38));
		inputPoints.add(new Point(7, 27));
		inputPoints.add(new Point(40, 20));
		inputPoints.add(new Point(0, 11));
		inputPoints.add(new Point(32, 18));
		inputPoints.add(new Point(37, 5));
		inputPoints.add(new Point(24, 17));
		inputPoints.add(new Point(19, 6));
		inputPoints.add(new Point(0, 24));
		inputPoints.add(new Point(23, 34));
		inputPoints.add(new Point(12, 10));
		inputPoints.add(new Point(29, 19));
		inputPoints.add(new Point(34, 3));
		inputPoints.add(new Point(15, 17));
		inputPoints.add(new Point(12, 13));
		inputPoints.add(new Point(32, 13));
		inputPoints.add(new Point(11, 6));
		inputPoints.add(new Point(40, 19));
		inputPoints.add(new Point(9, 11));
		inputPoints.add(new Point(6, 12));
		inputPoints.add(new Point(1, 9));
		inputPoints.add(new Point(9, 19));
		inputPoints.add(new Point(31, 30));
		inputPoints.add(new Point(20, 8));
		inputPoints.add(new Point(7, 30));
		inputPoints.add(new Point(28, 15));
		inputPoints.add(new Point(40, 25));
		inputPoints.add(new Point(13, 33));
		inputPoints.add(new Point(33, 23));
		inputPoints.add(new Point(22, 35));
		inputPoints.add(new Point(40, 36));
		inputPoints.add(new Point(33, 20));
		inputPoints.add(new Point(4, 24));
		inputPoints.add(new Point(15, 23));
		inputPoints.add(new Point(26, 28));
		inputPoints.add(new Point(33, 21));
		inputPoints.add(new Point(37, 11));
		inputPoints.add(new Point(23, 7));
		inputPoints.add(new Point(33, 35));
		inputPoints.add(new Point(2, 17));
		inputPoints.add(new Point(38, 2));
		inputPoints.add(new Point(36, 11));
		inputPoints.add(new Point(1, 40));
		inputPoints.add(new Point(25, 15));
		inputPoints.add(new Point(39, 25));
		inputPoints.add(new Point(38, 12));
		inputPoints.add(new Point(19, 12));
		inputPoints.add(new Point(38, 13));
		inputPoints.add(new Point(17, 38));
		inputPoints.add(new Point(13, 38));
		inputPoints.add(new Point(16, 21));
		inputPoints.add(new Point(15, 28));
		inputPoints.add(new Point(15, 7));
		inputPoints.add(new Point(30, 2));
		inputPoints.add(new Point(31, 20));
		inputPoints.add(new Point(22, 5));
		inputPoints.add(new Point(26, 16));
		inputPoints.add(new Point(40, 32));
		inputPoints.add(new Point(18, 33));
		inputPoints.add(new Point(15, 13));
		inputPoints.add(new Point(26, 33));
		inputPoints.add(new Point(7, 13));
		inputPoints.add(new Point(15, 21));
		inputPoints.add(new Point(36, 34));
		inputPoints.add(new Point(32, 34));
		inputPoints.add(new Point(27, 24));
		inputPoints.add(new Point(23, 19));
		inputPoints.add(new Point(2, 33));
		inputPoints.add(new Point(12, 33));
		inputPoints.add(new Point(21, 28));
		inputPoints.add(new Point(39, 36));
		inputPoints.add(new Point(33, 9));
		inputPoints.add(new Point(24, 3));
		inputPoints.add(new Point(17, 25));
		inputPoints.add(new Point(16, 4));
		inputPoints.add(new Point(22, 20));
		inputPoints.add(new Point(20, 10));
		inputPoints.add(new Point(0, 26));
		inputPoints.add(new Point(10, 12));
		inputPoints.add(new Point(0, 16));
		inputPoints.add(new Point(7, 12));
		inputPoints.add(new Point(15, 4));
		inputPoints.add(new Point(6, 18));
		inputPoints.add(new Point(24, 21));
		inputPoints.add(new Point(32, 30));
		inputPoints.add(new Point(12, 2));
		inputPoints.add(new Point(34, 20));
		inputPoints.add(new Point(11, 11));
		inputPoints.add(new Point(39, 5));
		inputPoints.add(new Point(36, 23));
		inputPoints.add(new Point(40, 6));
		inputPoints.add(new Point(4, 4));
		inputPoints.add(new Point(39, 24));
		inputPoints.add(new Point(25, 27));
		inputPoints.add(new Point(14, 2));
		inputPoints.add(new Point(1, 6));
		inputPoints.add(new Point(32, 16));
		inputPoints.add(new Point(4, 11));
		inputPoints.add(new Point(5, 20));
		inputPoints.add(new Point(22, 8));
		inputPoints.add(new Point(17, 33));
		inputPoints.add(new Point(31, 32));
		inputPoints.add(new Point(6, 20));
		inputPoints.add(new Point(23, 25));
		inputPoints.add(new Point(16, 40));
		inputPoints.add(new Point(23, 17));
		inputPoints.add(new Point(17, 36));
		inputPoints.add(new Point(13, 32));
		inputPoints.add(new Point(30, 13));
		inputPoints.add(new Point(30, 21));
		inputPoints.add(new Point(3, 37));
		inputPoints.add(new Point(36, 25));
		inputPoints.add(new Point(1, 0));
		inputPoints.add(new Point(26, 0));
		inputPoints.add(new Point(30, 3));
		inputPoints.add(new Point(24, 14));
		inputPoints.add(new Point(38, 26));
		inputPoints.add(new Point(35, 15));
		inputPoints.add(new Point(13, 34));
		inputPoints.add(new Point(36, 19));
		inputPoints.add(new Point(5, 35));
		inputPoints.add(new Point(17, 26));
		inputPoints.add(new Point(36, 16));
		inputPoints.add(new Point(6, 39));
		inputPoints.add(new Point(9, 20));
		inputPoints.add(new Point(40, 9));
		inputPoints.add(new Point(38, 0));
		inputPoints.add(new Point(7, 25));
		inputPoints.add(new Point(35, 27));
		inputPoints.add(new Point(39, 2));
		inputPoints.add(new Point(39, 17));
		inputPoints.add(new Point(9, 15));
		inputPoints.add(new Point(16, 35));
		inputPoints.add(new Point(23, 12));
		inputPoints.add(new Point(33, 38));
		inputPoints.add(new Point(23, 16));
		inputPoints.add(new Point(33, 1));
		inputPoints.add(new Point(7, 23));
		inputPoints.add(new Point(33, 36));
		inputPoints.add(new Point(3, 14));
		inputPoints.add(new Point(24, 28));
		inputPoints.add(new Point(24, 10));
		inputPoints.add(new Point(9, 30));
		inputPoints.add(new Point(4, 31));
		inputPoints.add(new Point(10, 6));
		inputPoints.add(new Point(17, 14));
		inputPoints.add(new Point(21, 37));
		inputPoints.add(new Point(5, 15));
		inputPoints.add(new Point(18, 37));
		inputPoints.add(new Point(35, 13));
		inputPoints.add(new Point(14, 39));
		inputPoints.add(new Point(24, 38));
		inputPoints.add(new Point(2, 3));
		inputPoints.add(new Point(7, 18));
		inputPoints.add(new Point(27, 12));
		inputPoints.add(new Point(40, 1));
		inputPoints.add(new Point(12, 12));
		inputPoints.add(new Point(4, 38));
		inputPoints.add(new Point(2, 38));
		inputPoints.add(new Point(34, 4));
		inputPoints.add(new Point(21, 3));
		inputPoints.add(new Point(31, 39));
		inputPoints.add(new Point(27, 20));
		inputPoints.add(new Point(20, 19));
		inputPoints.add(new Point(29, 4));
		inputPoints.add(new Point(35, 36));
		inputPoints.add(new Point(10, 21));
		inputPoints.add(new Point(35, 18));
		inputPoints.add(new Point(8, 31));
		inputPoints.add(new Point(0, 27));
		inputPoints.add(new Point(3, 21));
		inputPoints.add(new Point(35, 38));
		inputPoints.add(new Point(31, 36));
		inputPoints.add(new Point(16, 25));
		inputPoints.add(new Point(33, 25));
		inputPoints.add(new Point(18, 9));
		inputPoints.add(new Point(21, 26));
		inputPoints.add(new Point(17, 39));
		inputPoints.add(new Point(35, 19));
		inputPoints.add(new Point(24, 15));
		inputPoints.add(new Point(10, 9));
		inputPoints.add(new Point(15, 39));
		inputPoints.add(new Point(10, 11));
		inputPoints.add(new Point(34, 11));
		inputPoints.add(new Point(9, 9));
		inputPoints.add(new Point(12, 14));
		inputPoints.add(new Point(23, 38));
		inputPoints.add(new Point(37, 27));
		inputPoints.add(new Point(39, 12));
		inputPoints.add(new Point(7, 20));
		inputPoints.add(new Point(3, 20));
		inputPoints.add(new Point(14, 8));
		inputPoints.add(new Point(11, 3));
		inputPoints.add(new Point(26, 13));
		inputPoints.add(new Point(25, 0));
		inputPoints.add(new Point(24, 36));
		inputPoints.add(new Point(22, 13));
		inputPoints.add(new Point(21, 18));
		inputPoints.add(new Point(31, 15));
		inputPoints.add(new Point(11, 33));
		inputPoints.add(new Point(28, 7));
		inputPoints.add(new Point(3, 40));
		inputPoints.add(new Point(26, 9));
		inputPoints.add(new Point(35, 30));
		inputPoints.add(new Point(38, 16));
		inputPoints.add(new Point(36, 32));
		inputPoints.add(new Point(15, 26));
		inputPoints.add(new Point(2, 25));
		inputPoints.add(new Point(4, 21));
		inputPoints.add(new Point(31, 9));
		inputPoints.add(new Point(21, 11));
		inputPoints.add(new Point(8, 18));
		inputPoints.add(new Point(0, 32));
		inputPoints.add(new Point(3, 2));
		inputPoints.add(new Point(17, 16));
		inputPoints.add(new Point(9, 25));
		inputPoints.add(new Point(16, 37));
		inputPoints.add(new Point(0, 20));
		inputPoints.add(new Point(26, 20));
		inputPoints.add(new Point(7, 19));
		inputPoints.add(new Point(37, 4));
		inputPoints.add(new Point(0, 22));
		inputPoints.add(new Point(10, 4));
		inputPoints.add(new Point(34, 39));
		inputPoints.add(new Point(18, 26));
		inputPoints.add(new Point(35, 33));
		inputPoints.add(new Point(22, 3));
		inputPoints.add(new Point(11, 5));
		inputPoints.add(new Point(35, 16));
		inputPoints.add(new Point(13, 12));
		inputPoints.add(new Point(32, 3));
		inputPoints.add(new Point(20, 9));
		inputPoints.add(new Point(28, 8));
		inputPoints.add(new Point(14, 4));
		inputPoints.add(new Point(33, 40));
		inputPoints.add(new Point(20, 21));
		inputPoints.add(new Point(27, 10));
		inputPoints.add(new Point(7, 4));
		inputPoints.add(new Point(1, 28));
		inputPoints.add(new Point(16, 15));
		inputPoints.add(new Point(14, 21));
		inputPoints.add(new Point(12, 29));
		inputPoints.add(new Point(33, 34));
		inputPoints.add(new Point(14, 0));
		inputPoints.add(new Point(10, 40));
		inputPoints.add(new Point(21, 20));
		inputPoints.add(new Point(27, 35));
		inputPoints.add(new Point(26, 35));
		inputPoints.add(new Point(19, 22));
		inputPoints.add(new Point(13, 4));
		inputPoints.add(new Point(38, 39));
		inputPoints.add(new Point(11, 4));
		inputPoints.add(new Point(15, 6));
		inputPoints.add(new Point(28, 14));
		inputPoints.add(new Point(25, 18));
		inputPoints.add(new Point(22, 14));
		inputPoints.add(new Point(34, 32));
		inputPoints.add(new Point(35, 14));
		inputPoints.add(new Point(14, 33));
		inputPoints.add(new Point(29, 17));
		inputPoints.add(new Point(30, 20));
		inputPoints.add(new Point(1, 36));
		inputPoints.add(new Point(33, 19));
		inputPoints.add(new Point(16, 16));
		inputPoints.add(new Point(29, 5));
		inputPoints.add(new Point(14, 30));
		inputPoints.add(new Point(30, 37));
		inputPoints.add(new Point(34, 37));
		inputPoints.add(new Point(6, 1));
		inputPoints.add(new Point(33, 15));
		inputPoints.add(new Point(37, 30));
		inputPoints.add(new Point(19, 16));
		inputPoints.add(new Point(31, 8));
		inputPoints.add(new Point(11, 17));
		inputPoints.add(new Point(29, 2));
		inputPoints.add(new Point(22, 0));
		inputPoints.add(new Point(33, 26));
		inputPoints.add(new Point(4, 6));
		inputPoints.add(new Point(28, 35));
		inputPoints.add(new Point(12, 26));
		inputPoints.add(new Point(26, 18));
		inputPoints.add(new Point(40, 27));
		inputPoints.add(new Point(12, 16));
		inputPoints.add(new Point(10, 30));
		inputPoints.add(new Point(11, 19));
		inputPoints.add(new Point(4, 9));
		inputPoints.add(new Point(24, 7));
		inputPoints.add(new Point(14, 10));
		inputPoints.add(new Point(31, 1));
		inputPoints.add(new Point(32, 21));
		inputPoints.add(new Point(38, 36));
		inputPoints.add(new Point(32, 33));
		inputPoints.add(new Point(6, 40));
		inputPoints.add(new Point(16, 3));
		inputPoints.add(new Point(30, 23));
		inputPoints.add(new Point(30, 26));
		inputPoints.add(new Point(20, 2));
		inputPoints.add(new Point(17, 19));
		inputPoints.add(new Point(22, 38));
		inputPoints.add(new Point(9, 39));
		inputPoints.add(new Point(16, 6));
		inputPoints.add(new Point(14, 16));
		inputPoints.add(new Point(32, 19));
		inputPoints.add(new Point(29, 0));
		inputPoints.add(new Point(36, 30));
		inputPoints.add(new Point(3, 24));
		inputPoints.add(new Point(3, 17));
		inputPoints.add(new Point(30, 18));
		inputPoints.add(new Point(24, 1));
		inputPoints.add(new Point(26, 39));
		inputPoints.add(new Point(29, 27));
		inputPoints.add(new Point(7, 8));
		inputPoints.add(new Point(38, 27));
		inputPoints.add(new Point(6, 28));
		inputPoints.add(new Point(12, 7));
		inputPoints.add(new Point(37, 2));
		inputPoints.add(new Point(9, 16));
		inputPoints.add(new Point(37, 9));
		inputPoints.add(new Point(0, 21));
		inputPoints.add(new Point(10, 1));
		inputPoints.add(new Point(40, 29));
		inputPoints.add(new Point(37, 28));
		inputPoints.add(new Point(6, 19));
		inputPoints.add(new Point(16, 32));
		inputPoints.add(new Point(6, 0));
		inputPoints.add(new Point(32, 27));
		inputPoints.add(new Point(29, 10));
		inputPoints.add(new Point(6, 11));
		inputPoints.add(new Point(15, 29));
		inputPoints.add(new Point(33, 14));
		inputPoints.add(new Point(8, 37));
		inputPoints.add(new Point(3, 1));
		inputPoints.add(new Point(5, 6));
		inputPoints.add(new Point(21, 32));
		inputPoints.add(new Point(2, 7));
		inputPoints.add(new Point(38, 7));
		inputPoints.add(new Point(7, 39));
		inputPoints.add(new Point(39, 0));
		inputPoints.add(new Point(10, 8));
		inputPoints.add(new Point(1, 15));
		inputPoints.add(new Point(18, 28));
		inputPoints.add(new Point(8, 11));
		inputPoints.add(new Point(7, 0));
		inputPoints.add(new Point(22, 21));
		inputPoints.add(new Point(29, 26));
		inputPoints.add(new Point(14, 24));
		inputPoints.add(new Point(19, 37));
		inputPoints.add(new Point(23, 37));
		inputPoints.add(new Point(17, 28));
		inputPoints.add(new Point(0, 38));
		inputPoints.add(new Point(6, 10));
		inputPoints.add(new Point(39, 1));
		inputPoints.add(new Point(31, 16));
		inputPoints.add(new Point(16, 30));
		inputPoints.add(new Point(2, 6));
		inputPoints.add(new Point(16, 39));
		inputPoints.add(new Point(24, 6));
		inputPoints.add(new Point(39, 4));
		inputPoints.add(new Point(14, 26));
		inputPoints.add(new Point(29, 39));
		inputPoints.add(new Point(13, 29));
		inputPoints.add(new Point(23, 23));
		inputPoints.add(new Point(12, 8));
		inputPoints.add(new Point(8, 0));
		inputPoints.add(new Point(36, 10));
		inputPoints.add(new Point(23, 30));
		inputPoints.add(new Point(19, 28));
		inputPoints.add(new Point(37, 35));
		inputPoints.add(new Point(11, 18));
		inputPoints.add(new Point(39, 23));
		inputPoints.add(new Point(34, 22));
		inputPoints.add(new Point(25, 31));
		inputPoints.add(new Point(5, 14));
		inputPoints.add(new Point(25, 39));
		inputPoints.add(new Point(0, 17));
		inputPoints.add(new Point(23, 3));
		inputPoints.add(new Point(16, 36));
		inputPoints.add(new Point(2, 37));
		inputPoints.add(new Point(40, 12));
		inputPoints.add(new Point(35, 26));
		inputPoints.add(new Point(26, 38));
		inputPoints.add(new Point(23, 29));
		inputPoints.add(new Point(30, 12));
		inputPoints.add(new Point(15, 18));
		inputPoints.add(new Point(31, 4));
		inputPoints.add(new Point(8, 29));
		inputPoints.add(new Point(34, 10));
		inputPoints.add(new Point(21, 34));
		inputPoints.add(new Point(27, 5));
		inputPoints.add(new Point(24, 25));
		inputPoints.add(new Point(36, 3));
		inputPoints.add(new Point(32, 8));
		inputPoints.add(new Point(3, 11));
		inputPoints.add(new Point(15, 37));
		inputPoints.add(new Point(28, 28));
		inputPoints.add(new Point(26, 40));
		inputPoints.add(new Point(19, 25));
		inputPoints.add(new Point(39, 32));
		inputPoints.add(new Point(38, 5));
		inputPoints.add(new Point(24, 19));
		inputPoints.add(new Point(37, 7));
		inputPoints.add(new Point(20, 25));
		inputPoints.add(new Point(18, 7));
		inputPoints.add(new Point(20, 30));
		inputPoints.add(new Point(33, 28));
		inputPoints.add(new Point(29, 12));
		inputPoints.add(new Point(34, 7));
		inputPoints.add(new Point(34, 29));
		inputPoints.add(new Point(7, 37));
		inputPoints.add(new Point(8, 14));
		inputPoints.add(new Point(21, 2));
		inputPoints.add(new Point(0, 18));
		inputPoints.add(new Point(0, 36));
		inputPoints.add(new Point(33, 7));
		inputPoints.add(new Point(13, 28));
		inputPoints.add(new Point(16, 27));
		inputPoints.add(new Point(13, 1));
		inputPoints.add(new Point(28, 30));
		inputPoints.add(new Point(21, 9));
		inputPoints.add(new Point(29, 6));
		inputPoints.add(new Point(13, 8));
		inputPoints.add(new Point(0, 33));
		inputPoints.add(new Point(1, 7));
		inputPoints.add(new Point(10, 7));
		inputPoints.add(new Point(13, 18));
		inputPoints.add(new Point(39, 16));
		inputPoints.add(new Point(31, 13));
		inputPoints.add(new Point(0, 34));
		inputPoints.add(new Point(38, 31));
		inputPoints.add(new Point(34, 40));
		inputPoints.add(new Point(23, 32));
		inputPoints.add(new Point(15, 3));
		inputPoints.add(new Point(5, 17));
		inputPoints.add(new Point(22, 1));
		inputPoints.add(new Point(16, 2));
		inputPoints.add(new Point(38, 21));
		inputPoints.add(new Point(7, 17));
		inputPoints.add(new Point(6, 8));
		inputPoints.add(new Point(34, 31));
		inputPoints.add(new Point(37, 0));
		inputPoints.add(new Point(22, 36));
		inputPoints.add(new Point(37, 12));
		inputPoints.add(new Point(3, 7));
		inputPoints.add(new Point(34, 21));
		inputPoints.add(new Point(9, 35));
		inputPoints.add(new Point(9, 32));
		inputPoints.add(new Point(23, 9));
		inputPoints.add(new Point(21, 16));
		inputPoints.add(new Point(33, 13));
		inputPoints.add(new Point(18, 32));
		inputPoints.add(new Point(34, 38));
		inputPoints.add(new Point(36, 5));
		inputPoints.add(new Point(7, 2));
		inputPoints.add(new Point(20, 33));
		inputPoints.add(new Point(23, 2));
		inputPoints.add(new Point(1, 17));
		inputPoints.add(new Point(31, 29));
		inputPoints.add(new Point(14, 22));
		inputPoints.add(new Point(20, 7));
		inputPoints.add(new Point(10, 0));
		inputPoints.add(new Point(6, 36));
		inputPoints.add(new Point(17, 21));
		inputPoints.add(new Point(1, 11));
		inputPoints.add(new Point(22, 22));
		inputPoints.add(new Point(1, 13));
		inputPoints.add(new Point(1, 29));
		inputPoints.add(new Point(0, 23));
		inputPoints.add(new Point(2, 39));
		inputPoints.add(new Point(1, 1));
		inputPoints.add(new Point(1, 26));
		inputPoints.add(new Point(26, 30));
		inputPoints.add(new Point(18, 22));
		inputPoints.add(new Point(25, 9));
		inputPoints.add(new Point(8, 36));
		inputPoints.add(new Point(4, 13));
		inputPoints.add(new Point(5, 29));
		inputPoints.add(new Point(27, 19));
		inputPoints.add(new Point(29, 24));
		inputPoints.add(new Point(0, 1));
		inputPoints.add(new Point(8, 21));
		inputPoints.add(new Point(22, 32));
		inputPoints.add(new Point(20, 39));
		inputPoints.add(new Point(5, 19));
		inputPoints.add(new Point(1, 25));
		inputPoints.add(new Point(11, 37));
		inputPoints.add(new Point(29, 8));
		inputPoints.add(new Point(1, 31));
		inputPoints.add(new Point(16, 33));
		inputPoints.add(new Point(1, 35));
		inputPoints.add(new Point(16, 1));
		inputPoints.add(new Point(5, 34));
		inputPoints.add(new Point(23, 1));
		inputPoints.add(new Point(34, 28));
		inputPoints.add(new Point(13, 19));
		inputPoints.add(new Point(29, 33));
		inputPoints.add(new Point(36, 9));
		inputPoints.add(new Point(39, 8));
		inputPoints.add(new Point(14, 15));
		inputPoints.add(new Point(21, 36));
		inputPoints.add(new Point(4, 39));
		inputPoints.add(new Point(11, 2));
		inputPoints.add(new Point(23, 35));
		inputPoints.add(new Point(7, 15));
		inputPoints.add(new Point(16, 11));
		inputPoints.add(new Point(28, 12));
		inputPoints.add(new Point(31, 7));
		inputPoints.add(new Point(3, 32));
		inputPoints.add(new Point(17, 13));
		inputPoints.add(new Point(6, 37));
		inputPoints.add(new Point(26, 32));
		inputPoints.add(new Point(13, 10));
		inputPoints.add(new Point(32, 35));
		inputPoints.add(new Point(11, 10));
		inputPoints.add(new Point(7, 10));
		inputPoints.add(new Point(37, 21));
		inputPoints.add(new Point(3, 39));
		inputPoints.add(new Point(3, 6));
		inputPoints.add(new Point(25, 8));
		inputPoints.add(new Point(23, 8));
		inputPoints.add(new Point(2, 22));
		inputPoints.add(new Point(6, 14));
		inputPoints.add(new Point(18, 18));
		inputPoints.add(new Point(17, 37));
		inputPoints.add(new Point(20, 17));
		inputPoints.add(new Point(8, 2));
		inputPoints.add(new Point(16, 24));
		inputPoints.add(new Point(6, 15));
		inputPoints.add(new Point(37, 14));
		inputPoints.add(new Point(36, 15));
		inputPoints.add(new Point(37, 20));
		inputPoints.add(new Point(32, 22));
		inputPoints.add(new Point(8, 15));
		inputPoints.add(new Point(2, 15));
		inputPoints.add(new Point(10, 36));
		inputPoints.add(new Point(29, 22));
		inputPoints.add(new Point(28, 20));
		inputPoints.add(new Point(9, 34));
		inputPoints.add(new Point(17, 31));
		inputPoints.add(new Point(40, 28));
		inputPoints.add(new Point(37, 39));
		inputPoints.add(new Point(1, 4));
		inputPoints.add(new Point(5, 2));
		inputPoints.add(new Point(11, 15));
		inputPoints.add(new Point(10, 35));
		inputPoints.add(new Point(26, 31));
		inputPoints.add(new Point(12, 4));
		inputPoints.add(new Point(20, 29));
		inputPoints.add(new Point(23, 33));
		inputPoints.add(new Point(9, 0));
		inputPoints.add(new Point(33, 18));
		inputPoints.add(new Point(15, 12));
		inputPoints.add(new Point(31, 11));
		inputPoints.add(new Point(32, 17));
		inputPoints.add(new Point(18, 10));
		inputPoints.add(new Point(15, 15));
		inputPoints.add(new Point(18, 2));
		inputPoints.add(new Point(24, 20));
		inputPoints.add(new Point(29, 34));
		inputPoints.add(new Point(15, 27));
		inputPoints.add(new Point(5, 18));
		inputPoints.add(new Point(7, 26));
		inputPoints.add(new Point(37, 22));
		inputPoints.add(new Point(28, 25));
		inputPoints.add(new Point(13, 40));
		inputPoints.add(new Point(5, 23));
		inputPoints.add(new Point(36, 33));
		inputPoints.add(new Point(19, 32));
		inputPoints.add(new Point(10, 15));
		inputPoints.add(new Point(28, 32));
		inputPoints.add(new Point(2, 29));
		inputPoints.add(new Point(9, 3));
		inputPoints.add(new Point(40, 33));
		inputPoints.add(new Point(22, 33));
		inputPoints.add(new Point(5, 39));
		inputPoints.add(new Point(30, 38));
		inputPoints.add(new Point(30, 32));
		inputPoints.add(new Point(22, 2));
		inputPoints.add(new Point(19, 14));
		inputPoints.add(new Point(31, 5));
		inputPoints.add(new Point(12, 28));
		inputPoints.add(new Point(22, 25));
		inputPoints.add(new Point(27, 6));
		inputPoints.add(new Point(5, 11));
		inputPoints.add(new Point(36, 24));
		inputPoints.add(new Point(0, 0));
		inputPoints.add(new Point(36, 0));
		inputPoints.add(new Point(20, 3));
		inputPoints.add(new Point(29, 21));
		inputPoints.add(new Point(16, 23));
		inputPoints.add(new Point(36, 21));
		inputPoints.add(new Point(9, 22));
		inputPoints.add(new Point(27, 40));
		inputPoints.add(new Point(11, 29));
		inputPoints.add(new Point(38, 10));
		inputPoints.add(new Point(5, 37));
		inputPoints.add(new Point(22, 18));
		inputPoints.add(new Point(25, 10));
		inputPoints.add(new Point(29, 1));
		inputPoints.add(new Point(5, 1));
		inputPoints.add(new Point(22, 29));
		inputPoints.add(new Point(35, 17));
		inputPoints.add(new Point(28, 4));
		inputPoints.add(new Point(16, 8));
		inputPoints.add(new Point(4, 25));
		inputPoints.add(new Point(9, 33));
		inputPoints.add(new Point(17, 20));
		inputPoints.add(new Point(8, 4));
		inputPoints.add(new Point(31, 25));
		inputPoints.add(new Point(8, 26));
		inputPoints.add(new Point(21, 4));
		inputPoints.add(new Point(29, 11));
		inputPoints.add(new Point(39, 3));
		inputPoints.add(new Point(22, 15));
		inputPoints.add(new Point(14, 31));
		inputPoints.add(new Point(33, 12));
		inputPoints.add(new Point(33, 11));
		inputPoints.add(new Point(22, 17));
		inputPoints.add(new Point(12, 34));
		inputPoints.add(new Point(34, 26));
		inputPoints.add(new Point(9, 7));
		inputPoints.add(new Point(28, 1));
		inputPoints.add(new Point(19, 29));
		inputPoints.add(new Point(33, 5));
		inputPoints.add(new Point(7, 36));
		inputPoints.add(new Point(35, 34));
		inputPoints.add(new Point(19, 17));
		inputPoints.add(new Point(20, 23));
		inputPoints.add(new Point(38, 33));
		inputPoints.add(new Point(9, 23));
		inputPoints.add(new Point(14, 38));
		inputPoints.add(new Point(34, 9));
		inputPoints.add(new Point(17, 12));
		inputPoints.add(new Point(2, 31));
		inputPoints.add(new Point(27, 36));
		inputPoints.add(new Point(10, 13));
		inputPoints.add(new Point(19, 4));
		inputPoints.add(new Point(23, 10));
		inputPoints.add(new Point(23, 6));
		inputPoints.add(new Point(27, 31));
		inputPoints.add(new Point(10, 32));
		inputPoints.add(new Point(17, 40));
		inputPoints.add(new Point(10, 24));
		inputPoints.add(new Point(25, 35));
		inputPoints.add(new Point(19, 3));
		inputPoints.add(new Point(39, 27));
		inputPoints.add(new Point(21, 38));
		inputPoints.add(new Point(26, 21));
		inputPoints.add(new Point(13, 23));
		inputPoints.add(new Point(32, 39));
		inputPoints.add(new Point(11, 34));
		inputPoints.add(new Point(34, 18));
		inputPoints.add(new Point(18, 23));
		inputPoints.add(new Point(28, 11));
		inputPoints.add(new Point(29, 7));
		inputPoints.add(new Point(14, 32));
		inputPoints.add(new Point(32, 40));
		inputPoints.add(new Point(4, 14));
		inputPoints.add(new Point(18, 6));
		inputPoints.add(new Point(15, 38));
		inputPoints.add(new Point(38, 8));
		inputPoints.add(new Point(32, 20));
		inputPoints.add(new Point(1, 22));
		inputPoints.add(new Point(34, 14));
		inputPoints.add(new Point(21, 19));
		inputPoints.add(new Point(27, 22));
		inputPoints.add(new Point(23, 15));
		inputPoints.add(new Point(30, 8));
		inputPoints.add(new Point(15, 1));
		inputPoints.add(new Point(11, 36));
		inputPoints.add(new Point(6, 29));
		inputPoints.add(new Point(39, 10));
		inputPoints.add(new Point(18, 27));
		inputPoints.add(new Point(6, 7));
		inputPoints.add(new Point(14, 18));
		inputPoints.add(new Point(4, 36));
		inputPoints.add(new Point(2, 1));
		inputPoints.add(new Point(15, 24));
		inputPoints.add(new Point(38, 37));
		inputPoints.add(new Point(31, 31));
		inputPoints.add(new Point(40, 40));
		inputPoints.add(new Point(16, 19));
		inputPoints.add(new Point(9, 31));
		inputPoints.add(new Point(31, 35));
		inputPoints.add(new Point(33, 31));
		inputPoints.add(new Point(12, 3));
		inputPoints.add(new Point(21, 39));
		inputPoints.add(new Point(25, 23));
		inputPoints.add(new Point(2, 9));
		inputPoints.add(new Point(34, 24));
		inputPoints.add(new Point(32, 14));
		inputPoints.add(new Point(28, 13));
		inputPoints.add(new Point(9, 2));
		inputPoints.add(new Point(3, 9));
		inputPoints.add(new Point(2, 30));
		inputPoints.add(new Point(7, 5));
		inputPoints.add(new Point(36, 37));
		inputPoints.add(new Point(17, 24));
		inputPoints.add(new Point(34, 17));
		inputPoints.add(new Point(35, 21));
		inputPoints.add(new Point(4, 28));
		inputPoints.add(new Point(17, 11));
		inputPoints.add(new Point(10, 10));
		inputPoints.add(new Point(33, 27));
		inputPoints.add(new Point(2, 13));
		inputPoints.add(new Point(29, 38));
		inputPoints.add(new Point(22, 16));
		inputPoints.add(new Point(19, 24));
		inputPoints.add(new Point(11, 7));
		inputPoints.add(new Point(6, 16));
		inputPoints.add(new Point(9, 14));
		inputPoints.add(new Point(13, 21));
		inputPoints.add(new Point(23, 31));
		inputPoints.add(new Point(2, 40));
		inputPoints.add(new Point(19, 7));
		inputPoints.add(new Point(14, 17));
		inputPoints.add(new Point(9, 38));
		inputPoints.add(new Point(11, 28));
		inputPoints.add(new Point(39, 34));
		inputPoints.add(new Point(40, 34));
		inputPoints.add(new Point(5, 21));
		inputPoints.add(new Point(17, 17));
		inputPoints.add(new Point(12, 17));
		inputPoints.add(new Point(24, 34));
		inputPoints.add(new Point(22, 4));
		inputPoints.add(new Point(30, 35));
		inputPoints.add(new Point(23, 20));
		inputPoints.add(new Point(40, 8));
		inputPoints.add(new Point(39, 29));
		inputPoints.add(new Point(32, 9));
		inputPoints.add(new Point(25, 21));
		inputPoints.add(new Point(26, 11));
		inputPoints.add(new Point(5, 27));
		inputPoints.add(new Point(3, 15));
		inputPoints.add(new Point(35, 1));
		inputPoints.add(new Point(6, 30));
		inputPoints.add(new Point(26, 14));
		inputPoints.add(new Point(22, 9));
		inputPoints.add(new Point(3, 31));
		inputPoints.add(new Point(13, 14));
		inputPoints.add(new Point(16, 7));
		inputPoints.add(new Point(10, 20));
		inputPoints.add(new Point(11, 23));
		inputPoints.add(new Point(20, 32));
		inputPoints.add(new Point(33, 39));
		inputPoints.add(new Point(14, 23));
		inputPoints.add(new Point(37, 25));
		inputPoints.add(new Point(31, 12));
		inputPoints.add(new Point(2, 21));
		inputPoints.add(new Point(9, 10));
		inputPoints.add(new Point(26, 2));
		inputPoints.add(new Point(39, 40));
		inputPoints.add(new Point(13, 13));
		inputPoints.add(new Point(40, 5));
		inputPoints.add(new Point(6, 25));
		inputPoints.add(new Point(14, 34));
		inputPoints.add(new Point(5, 8));
		inputPoints.add(new Point(35, 28));
		inputPoints.add(new Point(31, 33));
		inputPoints.add(new Point(5, 22));
		inputPoints.add(new Point(4, 2));
		inputPoints.add(new Point(29, 23));
		inputPoints.add(new Point(39, 14));
		inputPoints.add(new Point(5, 9));
		inputPoints.add(new Point(3, 18));
		inputPoints.add(new Point(7, 7));
		inputPoints.add(new Point(11, 20));
		inputPoints.add(new Point(5, 32));
		inputPoints.add(new Point(19, 13));

		desiredPoints.add(new Point(0, 0));
		desiredPoints.add(new Point(39, 0));
		desiredPoints.add(new Point(40, 1));
		desiredPoints.add(new Point(40, 40));
		desiredPoints.add(new Point(1, 40));
		desiredPoints.add(new Point(0, 38));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 12 (random large set of points in small range ({0, 40}, {0, 40}) )",
				success);

		// #endregion
	}

	public void Case13() {

		// #region Case 13 (random large set of points in large range ({0, 500},
		// {0, 500})):

		inputPoints.add(new Point(68, 196));
		inputPoints.add(new Point(144, 87));
		inputPoints.add(new Point(64, 278));
		inputPoints.add(new Point(331, 122));
		inputPoints.add(new Point(50, 125));
		inputPoints.add(new Point(436, 497));
		inputPoints.add(new Point(368, 410));
		inputPoints.add(new Point(17, 225));
		inputPoints.add(new Point(223, 304));
		inputPoints.add(new Point(175, 78));
		inputPoints.add(new Point(210, 451));
		inputPoints.add(new Point(75, 79));
		inputPoints.add(new Point(49, 288));
		inputPoints.add(new Point(481, 78));
		inputPoints.add(new Point(89, 242));
		inputPoints.add(new Point(328, 434));
		inputPoints.add(new Point(265, 474));
		inputPoints.add(new Point(120, 443));
		inputPoints.add(new Point(454, 106));
		inputPoints.add(new Point(40, 26));
		inputPoints.add(new Point(342, 165));
		inputPoints.add(new Point(280, 151));
		inputPoints.add(new Point(432, 63));
		inputPoints.add(new Point(393, 379));
		inputPoints.add(new Point(91, 356));
		inputPoints.add(new Point(146, 102));
		inputPoints.add(new Point(306, 48));
		inputPoints.add(new Point(199, 500));
		inputPoints.add(new Point(300, 79));
		inputPoints.add(new Point(157, 118));
		inputPoints.add(new Point(15, 104));
		inputPoints.add(new Point(262, 168));
		inputPoints.add(new Point(99, 243));
		inputPoints.add(new Point(455, 306));
		inputPoints.add(new Point(397, 369));
		inputPoints.add(new Point(457, 297));
		inputPoints.add(new Point(286, 468));
		inputPoints.add(new Point(214, 428));
		inputPoints.add(new Point(67, 254));
		inputPoints.add(new Point(165, 89));
		inputPoints.add(new Point(262, 396));
		inputPoints.add(new Point(369, 55));
		inputPoints.add(new Point(451, 498));
		inputPoints.add(new Point(336, 199));
		inputPoints.add(new Point(428, 406));
		inputPoints.add(new Point(17, 202));
		inputPoints.add(new Point(116, 11));
		inputPoints.add(new Point(293, 39));
		inputPoints.add(new Point(412, 488));
		inputPoints.add(new Point(423, 150));
		inputPoints.add(new Point(389, 427));
		inputPoints.add(new Point(268, 127));
		inputPoints.add(new Point(223, 43));
		inputPoints.add(new Point(387, 475));
		inputPoints.add(new Point(268, 307));
		inputPoints.add(new Point(188, 166));
		inputPoints.add(new Point(54, 339));
		inputPoints.add(new Point(445, 427));
		inputPoints.add(new Point(404, 64));
		inputPoints.add(new Point(380, 65));
		inputPoints.add(new Point(217, 358));
		inputPoints.add(new Point(90, 238));
		inputPoints.add(new Point(500, 154));
		inputPoints.add(new Point(31, 104));
		inputPoints.add(new Point(123, 56));
		inputPoints.add(new Point(152, 89));
		inputPoints.add(new Point(154, 260));
		inputPoints.add(new Point(275, 111));
		inputPoints.add(new Point(189, 76));
		inputPoints.add(new Point(312, 274));
		inputPoints.add(new Point(350, 74));
		inputPoints.add(new Point(126, 415));
		inputPoints.add(new Point(86, 70));
		inputPoints.add(new Point(233, 254));
		inputPoints.add(new Point(59, 347));
		inputPoints.add(new Point(131, 196));
		inputPoints.add(new Point(141, 211));
		inputPoints.add(new Point(363, 92));
		inputPoints.add(new Point(204, 243));
		inputPoints.add(new Point(292, 416));
		inputPoints.add(new Point(33, 275));
		inputPoints.add(new Point(235, 381));
		inputPoints.add(new Point(462, 274));
		inputPoints.add(new Point(482, 338));
		inputPoints.add(new Point(189, 216));
		inputPoints.add(new Point(249, 465));
		inputPoints.add(new Point(78, 426));
		inputPoints.add(new Point(349, 433));
		inputPoints.add(new Point(357, 252));
		inputPoints.add(new Point(54, 423));
		inputPoints.add(new Point(44, 356));
		inputPoints.add(new Point(203, 374));
		inputPoints.add(new Point(51, 303));
		inputPoints.add(new Point(80, 272));
		inputPoints.add(new Point(208, 12));
		inputPoints.add(new Point(200, 21));
		inputPoints.add(new Point(136, 33));
		inputPoints.add(new Point(220, 239));
		inputPoints.add(new Point(201, 195));
		inputPoints.add(new Point(407, 93));
		inputPoints.add(new Point(126, 393));
		inputPoints.add(new Point(432, 330));
		inputPoints.add(new Point(341, 457));
		inputPoints.add(new Point(37, 421));
		inputPoints.add(new Point(40, 15));
		inputPoints.add(new Point(488, 364));
		inputPoints.add(new Point(27, 234));
		inputPoints.add(new Point(318, 186));
		inputPoints.add(new Point(291, 45));
		inputPoints.add(new Point(452, 333));
		inputPoints.add(new Point(418, 14));
		inputPoints.add(new Point(197, 370));
		inputPoints.add(new Point(100, 407));
		inputPoints.add(new Point(418, 317));
		inputPoints.add(new Point(306, 474));
		inputPoints.add(new Point(274, 362));
		inputPoints.add(new Point(281, 301));
		inputPoints.add(new Point(243, 497));
		inputPoints.add(new Point(365, 83));
		inputPoints.add(new Point(483, 372));
		inputPoints.add(new Point(206, 364));
		inputPoints.add(new Point(369, 358));
		inputPoints.add(new Point(302, 334));
		inputPoints.add(new Point(105, 312));
		inputPoints.add(new Point(80, 321));
		inputPoints.add(new Point(145, 383));
		inputPoints.add(new Point(178, 230));
		inputPoints.add(new Point(425, 404));
		inputPoints.add(new Point(287, 329));
		inputPoints.add(new Point(193, 317));
		inputPoints.add(new Point(441, 175));
		inputPoints.add(new Point(118, 123));
		inputPoints.add(new Point(315, 413));
		inputPoints.add(new Point(328, 346));
		inputPoints.add(new Point(312, 243));
		inputPoints.add(new Point(384, 477));
		inputPoints.add(new Point(304, 270));
		inputPoints.add(new Point(403, 31));
		inputPoints.add(new Point(404, 342));
		inputPoints.add(new Point(101, 232));
		inputPoints.add(new Point(333, 383));
		inputPoints.add(new Point(182, 468));
		inputPoints.add(new Point(469, 458));
		inputPoints.add(new Point(137, 61));
		inputPoints.add(new Point(138, 11));
		inputPoints.add(new Point(277, 288));
		inputPoints.add(new Point(205, 497));
		inputPoints.add(new Point(87, 52));
		inputPoints.add(new Point(487, 467));
		inputPoints.add(new Point(396, 295));
		inputPoints.add(new Point(279, 299));
		inputPoints.add(new Point(455, 326));
		inputPoints.add(new Point(67, 282));
		inputPoints.add(new Point(242, 355));
		inputPoints.add(new Point(196, 59));
		inputPoints.add(new Point(359, 21));
		inputPoints.add(new Point(435, 265));
		inputPoints.add(new Point(250, 183));
		inputPoints.add(new Point(0, 317));
		inputPoints.add(new Point(198, 181));
		inputPoints.add(new Point(275, 339));
		inputPoints.add(new Point(256, 125));
		inputPoints.add(new Point(334, 347));
		inputPoints.add(new Point(232, 25));
		inputPoints.add(new Point(325, 482));
		inputPoints.add(new Point(405, 320));
		inputPoints.add(new Point(295, 328));
		inputPoints.add(new Point(208, 5));
		inputPoints.add(new Point(16, 320));
		inputPoints.add(new Point(402, 148));
		inputPoints.add(new Point(180, 109));
		inputPoints.add(new Point(337, 151));
		inputPoints.add(new Point(369, 361));
		inputPoints.add(new Point(88, 174));
		inputPoints.add(new Point(123, 449));
		inputPoints.add(new Point(283, 96));
		inputPoints.add(new Point(414, 66));
		inputPoints.add(new Point(174, 273));
		inputPoints.add(new Point(91, 264));
		inputPoints.add(new Point(216, 112));
		inputPoints.add(new Point(50, 34));
		inputPoints.add(new Point(82, 234));
		inputPoints.add(new Point(325, 238));
		inputPoints.add(new Point(375, 97));
		inputPoints.add(new Point(350, 273));
		inputPoints.add(new Point(161, 277));
		inputPoints.add(new Point(194, 338));
		inputPoints.add(new Point(402, 91));
		inputPoints.add(new Point(296, 246));
		inputPoints.add(new Point(306, 433));
		inputPoints.add(new Point(213, 122));
		inputPoints.add(new Point(474, 41));
		inputPoints.add(new Point(247, 217));
		inputPoints.add(new Point(39, 319));
		inputPoints.add(new Point(82, 105));
		inputPoints.add(new Point(311, 179));
		inputPoints.add(new Point(468, 189));
		inputPoints.add(new Point(12, 302));
		inputPoints.add(new Point(265, 351));
		inputPoints.add(new Point(294, 80));
		inputPoints.add(new Point(360, 405));
		inputPoints.add(new Point(257, 457));
		inputPoints.add(new Point(404, 17));
		inputPoints.add(new Point(29, 5));
		inputPoints.add(new Point(258, 60));
		inputPoints.add(new Point(66, 497));
		inputPoints.add(new Point(393, 118));
		inputPoints.add(new Point(262, 338));
		inputPoints.add(new Point(156, 294));
		inputPoints.add(new Point(117, 400));
		inputPoints.add(new Point(46, 451));
		inputPoints.add(new Point(401, 489));
		inputPoints.add(new Point(367, 174));
		inputPoints.add(new Point(236, 134));
		inputPoints.add(new Point(450, 416));
		inputPoints.add(new Point(309, 229));
		inputPoints.add(new Point(315, 148));
		inputPoints.add(new Point(482, 43));
		inputPoints.add(new Point(17, 336));
		inputPoints.add(new Point(210, 462));
		inputPoints.add(new Point(188, 318));
		inputPoints.add(new Point(387, 145));
		inputPoints.add(new Point(406, 250));
		inputPoints.add(new Point(151, 414));
		inputPoints.add(new Point(405, 64));
		inputPoints.add(new Point(134, 202));
		inputPoints.add(new Point(50, 299));
		inputPoints.add(new Point(178, 207));
		inputPoints.add(new Point(14, 287));
		inputPoints.add(new Point(55, 191));
		inputPoints.add(new Point(145, 300));
		inputPoints.add(new Point(277, 218));
		inputPoints.add(new Point(473, 11));
		inputPoints.add(new Point(388, 349));
		inputPoints.add(new Point(271, 4));
		inputPoints.add(new Point(439, 114));
		inputPoints.add(new Point(402, 310));
		inputPoints.add(new Point(149, 314));
		inputPoints.add(new Point(41, 44));
		inputPoints.add(new Point(149, 188));
		inputPoints.add(new Point(336, 373));
		inputPoints.add(new Point(169, 53));
		inputPoints.add(new Point(0, 477));
		inputPoints.add(new Point(341, 291));
		inputPoints.add(new Point(273, 301));
		inputPoints.add(new Point(30, 73));
		inputPoints.add(new Point(456, 500));
		inputPoints.add(new Point(368, 417));
		inputPoints.add(new Point(171, 473));
		inputPoints.add(new Point(394, 422));
		inputPoints.add(new Point(37, 157));
		inputPoints.add(new Point(221, 18));
		inputPoints.add(new Point(497, 390));
		inputPoints.add(new Point(200, 380));
		inputPoints.add(new Point(319, 156));
		inputPoints.add(new Point(278, 485));
		inputPoints.add(new Point(190, 330));
		inputPoints.add(new Point(468, 333));
		inputPoints.add(new Point(441, 429));
		inputPoints.add(new Point(398, 192));
		inputPoints.add(new Point(481, 162));
		inputPoints.add(new Point(87, 337));
		inputPoints.add(new Point(315, 221));
		inputPoints.add(new Point(50, 193));
		inputPoints.add(new Point(238, 382));
		inputPoints.add(new Point(68, 268));
		inputPoints.add(new Point(125, 253));
		inputPoints.add(new Point(68, 335));
		inputPoints.add(new Point(157, 394));
		inputPoints.add(new Point(235, 469));
		inputPoints.add(new Point(487, 156));
		inputPoints.add(new Point(168, 9));
		inputPoints.add(new Point(479, 324));
		inputPoints.add(new Point(435, 63));
		inputPoints.add(new Point(443, 218));
		inputPoints.add(new Point(75, 466));
		inputPoints.add(new Point(164, 490));
		inputPoints.add(new Point(398, 73));
		inputPoints.add(new Point(197, 5));
		inputPoints.add(new Point(10, 408));
		inputPoints.add(new Point(381, 259));
		inputPoints.add(new Point(346, 332));
		inputPoints.add(new Point(274, 268));
		inputPoints.add(new Point(410, 108));
		inputPoints.add(new Point(149, 220));
		inputPoints.add(new Point(116, 151));
		inputPoints.add(new Point(136, 41));
		inputPoints.add(new Point(456, 184));
		inputPoints.add(new Point(306, 413));
		inputPoints.add(new Point(129, 314));
		inputPoints.add(new Point(416, 36));
		inputPoints.add(new Point(495, 255));
		inputPoints.add(new Point(233, 365));
		inputPoints.add(new Point(106, 437));
		inputPoints.add(new Point(401, 103));
		inputPoints.add(new Point(46, 321));
		inputPoints.add(new Point(296, 499));
		inputPoints.add(new Point(421, 107));
		inputPoints.add(new Point(162, 500));
		inputPoints.add(new Point(274, 488));
		inputPoints.add(new Point(224, 43));
		inputPoints.add(new Point(261, 246));
		inputPoints.add(new Point(88, 330));
		inputPoints.add(new Point(192, 111));
		inputPoints.add(new Point(256, 327));
		inputPoints.add(new Point(272, 206));
		inputPoints.add(new Point(302, 394));
		inputPoints.add(new Point(398, 216));
		inputPoints.add(new Point(82, 153));
		inputPoints.add(new Point(213, 211));
		inputPoints.add(new Point(473, 99));
		inputPoints.add(new Point(455, 394));
		inputPoints.add(new Point(356, 166));
		inputPoints.add(new Point(138, 138));
		inputPoints.add(new Point(397, 471));
		inputPoints.add(new Point(309, 116));
		inputPoints.add(new Point(423, 11));
		inputPoints.add(new Point(46, 16));
		inputPoints.add(new Point(99, 63));
		inputPoints.add(new Point(435, 200));
		inputPoints.add(new Point(101, 467));
		inputPoints.add(new Point(250, 1));
		inputPoints.add(new Point(177, 324));
		inputPoints.add(new Point(31, 481));
		inputPoints.add(new Point(191, 186));
		inputPoints.add(new Point(273, 338));
		inputPoints.add(new Point(80, 288));
		inputPoints.add(new Point(252, 79));
		inputPoints.add(new Point(328, 403));
		inputPoints.add(new Point(112, 312));
		inputPoints.add(new Point(226, 428));
		inputPoints.add(new Point(262, 336));
		inputPoints.add(new Point(462, 140));
		inputPoints.add(new Point(16, 379));
		inputPoints.add(new Point(263, 399));
		inputPoints.add(new Point(349, 449));
		inputPoints.add(new Point(493, 307));
		inputPoints.add(new Point(97, 14));
		inputPoints.add(new Point(458, 178));
		inputPoints.add(new Point(455, 395));
		inputPoints.add(new Point(419, 168));
		inputPoints.add(new Point(4, 307));
		inputPoints.add(new Point(233, 95));
		inputPoints.add(new Point(362, 327));
		inputPoints.add(new Point(154, 113));
		inputPoints.add(new Point(14, 460));
		inputPoints.add(new Point(425, 233));
		inputPoints.add(new Point(300, 484));
		inputPoints.add(new Point(449, 322));
		inputPoints.add(new Point(362, 492));
		inputPoints.add(new Point(0, 422));
		inputPoints.add(new Point(412, 461));
		inputPoints.add(new Point(370, 292));
		inputPoints.add(new Point(15, 403));
		inputPoints.add(new Point(89, 237));
		inputPoints.add(new Point(129, 489));
		inputPoints.add(new Point(18, 271));
		inputPoints.add(new Point(385, 145));
		inputPoints.add(new Point(74, 266));
		inputPoints.add(new Point(208, 283));
		inputPoints.add(new Point(270, 281));
		inputPoints.add(new Point(169, 68));
		inputPoints.add(new Point(310, 272));
		inputPoints.add(new Point(91, 294));
		inputPoints.add(new Point(173, 117));
		inputPoints.add(new Point(440, 59));
		inputPoints.add(new Point(371, 35));
		inputPoints.add(new Point(213, 332));
		inputPoints.add(new Point(158, 37));
		inputPoints.add(new Point(163, 171));
		inputPoints.add(new Point(248, 194));
		inputPoints.add(new Point(336, 2));
		inputPoints.add(new Point(217, 148));
		inputPoints.add(new Point(351, 236));
		inputPoints.add(new Point(183, 65));
		inputPoints.add(new Point(138, 197));
		inputPoints.add(new Point(390, 261));
		inputPoints.add(new Point(371, 365));
		inputPoints.add(new Point(432, 359));
		inputPoints.add(new Point(117, 297));
		inputPoints.add(new Point(207, 260));
		inputPoints.add(new Point(473, 134));
		inputPoints.add(new Point(472, 370));
		inputPoints.add(new Point(341, 154));
		inputPoints.add(new Point(463, 437));
		inputPoints.add(new Point(257, 171));
		inputPoints.add(new Point(153, 372));
		inputPoints.add(new Point(258, 363));
		inputPoints.add(new Point(433, 315));
		inputPoints.add(new Point(196, 204));
		inputPoints.add(new Point(465, 80));
		inputPoints.add(new Point(200, 409));
		inputPoints.add(new Point(411, 376));
		inputPoints.add(new Point(163, 324));
		inputPoints.add(new Point(164, 420));
		inputPoints.add(new Point(265, 125));
		inputPoints.add(new Point(410, 355));
		inputPoints.add(new Point(429, 19));
		inputPoints.add(new Point(231, 74));
		inputPoints.add(new Point(306, 421));
		inputPoints.add(new Point(279, 147));
		inputPoints.add(new Point(179, 303));
		inputPoints.add(new Point(253, 413));
		inputPoints.add(new Point(189, 95));
		inputPoints.add(new Point(167, 63));
		inputPoints.add(new Point(279, 223));
		inputPoints.add(new Point(69, 120));
		inputPoints.add(new Point(54, 455));
		inputPoints.add(new Point(120, 322));
		inputPoints.add(new Point(155, 271));
		inputPoints.add(new Point(32, 111));
		inputPoints.add(new Point(236, 499));
		inputPoints.add(new Point(126, 382));
		inputPoints.add(new Point(344, 460));
		inputPoints.add(new Point(307, 215));
		inputPoints.add(new Point(120, 414));
		inputPoints.add(new Point(79, 202));
		inputPoints.add(new Point(364, 313));
		inputPoints.add(new Point(231, 78));
		inputPoints.add(new Point(34, 224));
		inputPoints.add(new Point(301, 58));
		inputPoints.add(new Point(111, 13));
		inputPoints.add(new Point(175, 221));
		inputPoints.add(new Point(65, 272));
		inputPoints.add(new Point(485, 468));
		inputPoints.add(new Point(312, 171));
		inputPoints.add(new Point(281, 405));
		inputPoints.add(new Point(138, 445));
		inputPoints.add(new Point(381, 287));
		inputPoints.add(new Point(218, 248));
		inputPoints.add(new Point(303, 392));
		inputPoints.add(new Point(108, 319));
		inputPoints.add(new Point(26, 208));
		inputPoints.add(new Point(7, 91));
		inputPoints.add(new Point(406, 255));
		inputPoints.add(new Point(105, 471));
		inputPoints.add(new Point(108, 137));
		inputPoints.add(new Point(164, 142));
		inputPoints.add(new Point(98, 331));
		inputPoints.add(new Point(16, 294));
		inputPoints.add(new Point(459, 459));
		inputPoints.add(new Point(463, 245));
		inputPoints.add(new Point(99, 200));
		inputPoints.add(new Point(189, 379));
		inputPoints.add(new Point(185, 94));
		inputPoints.add(new Point(198, 227));
		inputPoints.add(new Point(245, 212));
		inputPoints.add(new Point(298, 18));
		inputPoints.add(new Point(367, 39));
		inputPoints.add(new Point(467, 280));
		inputPoints.add(new Point(27, 154));
		inputPoints.add(new Point(25, 455));
		inputPoints.add(new Point(42, 401));
		inputPoints.add(new Point(278, 25));
		inputPoints.add(new Point(384, 327));
		inputPoints.add(new Point(291, 446));
		inputPoints.add(new Point(78, 2));
		inputPoints.add(new Point(90, 353));
		inputPoints.add(new Point(4, 313));
		inputPoints.add(new Point(419, 19));
		inputPoints.add(new Point(338, 295));
		inputPoints.add(new Point(97, 383));
		inputPoints.add(new Point(201, 416));
		inputPoints.add(new Point(438, 188));
		inputPoints.add(new Point(428, 348));
		inputPoints.add(new Point(156, 367));
		inputPoints.add(new Point(488, 98));
		inputPoints.add(new Point(27, 386));
		inputPoints.add(new Point(340, 135));
		inputPoints.add(new Point(142, 16));
		inputPoints.add(new Point(217, 106));
		inputPoints.add(new Point(188, 258));
		inputPoints.add(new Point(464, 385));
		inputPoints.add(new Point(40, 408));
		inputPoints.add(new Point(354, 485));
		inputPoints.add(new Point(60, 378));
		inputPoints.add(new Point(15, 252));
		inputPoints.add(new Point(391, 47));
		inputPoints.add(new Point(174, 59));
		inputPoints.add(new Point(477, 306));
		inputPoints.add(new Point(324, 252));
		inputPoints.add(new Point(451, 281));
		inputPoints.add(new Point(204, 343));
		inputPoints.add(new Point(253, 377));
		inputPoints.add(new Point(23, 486));
		inputPoints.add(new Point(5, 332));
		inputPoints.add(new Point(216, 90));
		inputPoints.add(new Point(215, 352));
		inputPoints.add(new Point(425, 262));
		inputPoints.add(new Point(420, 261));
		inputPoints.add(new Point(234, 478));
		inputPoints.add(new Point(162, 463));
		inputPoints.add(new Point(86, 407));
		inputPoints.add(new Point(112, 306));
		inputPoints.add(new Point(492, 427));
		inputPoints.add(new Point(477, 38));
		inputPoints.add(new Point(250, 42));
		inputPoints.add(new Point(486, 109));
		inputPoints.add(new Point(433, 160));
		inputPoints.add(new Point(251, 438));
		inputPoints.add(new Point(498, 377));
		inputPoints.add(new Point(184, 424));
		inputPoints.add(new Point(431, 221));
		inputPoints.add(new Point(285, 449));
		inputPoints.add(new Point(248, 464));
		inputPoints.add(new Point(187, 422));
		inputPoints.add(new Point(167, 173));
		inputPoints.add(new Point(178, 180));
		inputPoints.add(new Point(97, 166));
		inputPoints.add(new Point(145, 86));
		inputPoints.add(new Point(429, 213));
		inputPoints.add(new Point(203, 56));
		inputPoints.add(new Point(96, 384));
		inputPoints.add(new Point(151, 472));
		inputPoints.add(new Point(164, 144));
		inputPoints.add(new Point(285, 372));
		inputPoints.add(new Point(57, 404));
		inputPoints.add(new Point(145, 389));
		inputPoints.add(new Point(146, 56));
		inputPoints.add(new Point(122, 62));
		inputPoints.add(new Point(111, 488));
		inputPoints.add(new Point(371, 340));
		inputPoints.add(new Point(110, 283));
		inputPoints.add(new Point(375, 338));
		inputPoints.add(new Point(81, 408));
		inputPoints.add(new Point(147, 59));
		inputPoints.add(new Point(88, 151));
		inputPoints.add(new Point(43, 124));
		inputPoints.add(new Point(222, 15));
		inputPoints.add(new Point(302, 148));
		inputPoints.add(new Point(23, 114));
		inputPoints.add(new Point(420, 382));
		inputPoints.add(new Point(177, 33));
		inputPoints.add(new Point(19, 481));
		inputPoints.add(new Point(188, 286));
		inputPoints.add(new Point(64, 408));
		inputPoints.add(new Point(372, 410));
		inputPoints.add(new Point(148, 109));
		inputPoints.add(new Point(155, 29));
		inputPoints.add(new Point(426, 333));
		inputPoints.add(new Point(155, 190));
		inputPoints.add(new Point(223, 48));
		inputPoints.add(new Point(5, 279));
		inputPoints.add(new Point(79, 106));
		inputPoints.add(new Point(385, 442));
		inputPoints.add(new Point(49, 357));
		inputPoints.add(new Point(369, 208));
		inputPoints.add(new Point(237, 466));
		inputPoints.add(new Point(116, 500));
		inputPoints.add(new Point(398, 394));
		inputPoints.add(new Point(206, 11));
		inputPoints.add(new Point(54, 394));
		inputPoints.add(new Point(373, 368));
		inputPoints.add(new Point(66, 278));
		inputPoints.add(new Point(329, 467));
		inputPoints.add(new Point(114, 260));
		inputPoints.add(new Point(425, 29));
		inputPoints.add(new Point(46, 24));
		inputPoints.add(new Point(353, 168));
		inputPoints.add(new Point(417, 457));
		inputPoints.add(new Point(15, 447));
		inputPoints.add(new Point(467, 165));
		inputPoints.add(new Point(193, 287));
		inputPoints.add(new Point(425, 18));
		inputPoints.add(new Point(218, 221));
		inputPoints.add(new Point(429, 467));
		inputPoints.add(new Point(491, 169));
		inputPoints.add(new Point(243, 330));
		inputPoints.add(new Point(244, 182));
		inputPoints.add(new Point(21, 37));
		inputPoints.add(new Point(390, 61));
		inputPoints.add(new Point(333, 19));
		inputPoints.add(new Point(374, 29));
		inputPoints.add(new Point(144, 301));
		inputPoints.add(new Point(237, 8));
		inputPoints.add(new Point(356, 235));
		inputPoints.add(new Point(336, 377));
		inputPoints.add(new Point(182, 389));
		inputPoints.add(new Point(222, 331));
		inputPoints.add(new Point(81, 135));
		inputPoints.add(new Point(14, 473));
		inputPoints.add(new Point(18, 194));
		inputPoints.add(new Point(466, 0));
		inputPoints.add(new Point(295, 321));
		inputPoints.add(new Point(198, 441));
		inputPoints.add(new Point(76, 223));
		inputPoints.add(new Point(437, 412));
		inputPoints.add(new Point(383, 196));
		inputPoints.add(new Point(476, 356));
		inputPoints.add(new Point(301, 41));
		inputPoints.add(new Point(498, 311));
		inputPoints.add(new Point(319, 494));
		inputPoints.add(new Point(252, 356));
		inputPoints.add(new Point(488, 491));
		inputPoints.add(new Point(20, 246));
		inputPoints.add(new Point(412, 403));
		inputPoints.add(new Point(14, 313));
		inputPoints.add(new Point(237, 406));
		inputPoints.add(new Point(492, 186));
		inputPoints.add(new Point(282, 166));
		inputPoints.add(new Point(329, 400));
		inputPoints.add(new Point(51, 422));
		inputPoints.add(new Point(393, 328));
		inputPoints.add(new Point(79, 180));
		inputPoints.add(new Point(382, 346));
		inputPoints.add(new Point(468, 253));
		inputPoints.add(new Point(13, 306));
		inputPoints.add(new Point(229, 483));
		inputPoints.add(new Point(150, 382));
		inputPoints.add(new Point(232, 277));
		inputPoints.add(new Point(183, 256));
		inputPoints.add(new Point(233, 108));
		inputPoints.add(new Point(117, 264));
		inputPoints.add(new Point(210, 490));
		inputPoints.add(new Point(456, 214));
		inputPoints.add(new Point(183, 364));
		inputPoints.add(new Point(419, 191));
		inputPoints.add(new Point(322, 365));
		inputPoints.add(new Point(428, 154));
		inputPoints.add(new Point(240, 357));
		inputPoints.add(new Point(135, 415));
		inputPoints.add(new Point(147, 195));
		inputPoints.add(new Point(493, 252));
		inputPoints.add(new Point(325, 245));
		inputPoints.add(new Point(105, 422));
		inputPoints.add(new Point(225, 104));
		inputPoints.add(new Point(142, 314));
		inputPoints.add(new Point(471, 33));
		inputPoints.add(new Point(106, 426));
		inputPoints.add(new Point(321, 170));
		inputPoints.add(new Point(288, 0));
		inputPoints.add(new Point(492, 109));
		inputPoints.add(new Point(334, 20));
		inputPoints.add(new Point(335, 32));
		inputPoints.add(new Point(332, 40));
		inputPoints.add(new Point(196, 310));
		inputPoints.add(new Point(255, 143));
		inputPoints.add(new Point(211, 67));
		inputPoints.add(new Point(277, 425));
		inputPoints.add(new Point(451, 427));
		inputPoints.add(new Point(476, 315));
		inputPoints.add(new Point(34, 472));
		inputPoints.add(new Point(62, 187));
		inputPoints.add(new Point(162, 360));
		inputPoints.add(new Point(346, 367));
		inputPoints.add(new Point(321, 329));
		inputPoints.add(new Point(150, 90));
		inputPoints.add(new Point(204, 391));
		inputPoints.add(new Point(24, 361));
		inputPoints.add(new Point(279, 349));
		inputPoints.add(new Point(144, 376));
		inputPoints.add(new Point(189, 413));
		inputPoints.add(new Point(357, 289));
		inputPoints.add(new Point(481, 121));
		inputPoints.add(new Point(347, 123));
		inputPoints.add(new Point(63, 466));
		inputPoints.add(new Point(98, 70));
		inputPoints.add(new Point(487, 132));
		inputPoints.add(new Point(341, 466));
		inputPoints.add(new Point(452, 265));
		inputPoints.add(new Point(186, 231));
		inputPoints.add(new Point(315, 285));
		inputPoints.add(new Point(437, 334));
		inputPoints.add(new Point(34, 1));
		inputPoints.add(new Point(21, 259));
		inputPoints.add(new Point(320, 287));
		inputPoints.add(new Point(431, 259));
		inputPoints.add(new Point(66, 442));
		inputPoints.add(new Point(28, 180));
		inputPoints.add(new Point(343, 154));
		inputPoints.add(new Point(414, 468));
		inputPoints.add(new Point(121, 200));
		inputPoints.add(new Point(106, 275));
		inputPoints.add(new Point(273, 183));
		inputPoints.add(new Point(212, 367));
		inputPoints.add(new Point(190, 121));
		inputPoints.add(new Point(362, 427));
		inputPoints.add(new Point(460, 411));
		inputPoints.add(new Point(176, 321));
		inputPoints.add(new Point(401, 28));
		inputPoints.add(new Point(48, 436));
		inputPoints.add(new Point(368, 163));
		inputPoints.add(new Point(189, 218));
		inputPoints.add(new Point(288, 73));
		inputPoints.add(new Point(148, 413));
		inputPoints.add(new Point(38, 108));
		inputPoints.add(new Point(124, 301));
		inputPoints.add(new Point(205, 465));
		inputPoints.add(new Point(407, 76));
		inputPoints.add(new Point(333, 164));
		inputPoints.add(new Point(346, 321));
		inputPoints.add(new Point(243, 97));
		inputPoints.add(new Point(296, 345));
		inputPoints.add(new Point(189, 123));
		inputPoints.add(new Point(35, 351));
		inputPoints.add(new Point(426, 348));
		inputPoints.add(new Point(3, 480));
		inputPoints.add(new Point(401, 49));
		inputPoints.add(new Point(356, 194));
		inputPoints.add(new Point(423, 369));
		inputPoints.add(new Point(76, 159));
		inputPoints.add(new Point(474, 476));
		inputPoints.add(new Point(463, 190));
		inputPoints.add(new Point(492, 491));
		inputPoints.add(new Point(94, 308));
		inputPoints.add(new Point(281, 66));
		inputPoints.add(new Point(144, 92));
		inputPoints.add(new Point(383, 163));
		inputPoints.add(new Point(87, 140));
		inputPoints.add(new Point(179, 285));
		inputPoints.add(new Point(211, 450));
		inputPoints.add(new Point(354, 442));
		inputPoints.add(new Point(277, 155));
		inputPoints.add(new Point(456, 158));
		inputPoints.add(new Point(1, 460));
		inputPoints.add(new Point(243, 103));
		inputPoints.add(new Point(261, 465));
		inputPoints.add(new Point(312, 294));
		inputPoints.add(new Point(241, 118));
		inputPoints.add(new Point(175, 102));
		inputPoints.add(new Point(351, 67));
		inputPoints.add(new Point(275, 122));
		inputPoints.add(new Point(144, 58));
		inputPoints.add(new Point(288, 85));
		inputPoints.add(new Point(29, 140));
		inputPoints.add(new Point(174, 209));
		inputPoints.add(new Point(237, 367));
		inputPoints.add(new Point(326, 287));
		inputPoints.add(new Point(136, 396));
		inputPoints.add(new Point(229, 143));
		inputPoints.add(new Point(427, 406));
		inputPoints.add(new Point(242, 234));
		inputPoints.add(new Point(230, 341));
		inputPoints.add(new Point(273, 343));
		inputPoints.add(new Point(311, 196));
		inputPoints.add(new Point(259, 430));
		inputPoints.add(new Point(439, 122));
		inputPoints.add(new Point(244, 423));
		inputPoints.add(new Point(115, 215));
		inputPoints.add(new Point(358, 420));
		inputPoints.add(new Point(388, 246));
		inputPoints.add(new Point(179, 150));
		inputPoints.add(new Point(381, 468));
		inputPoints.add(new Point(402, 353));
		inputPoints.add(new Point(244, 6));
		inputPoints.add(new Point(369, 318));
		inputPoints.add(new Point(275, 38));
		inputPoints.add(new Point(411, 118));
		inputPoints.add(new Point(0, 378));
		inputPoints.add(new Point(239, 260));
		inputPoints.add(new Point(259, 451));
		inputPoints.add(new Point(251, 487));
		inputPoints.add(new Point(107, 317));
		inputPoints.add(new Point(268, 392));
		inputPoints.add(new Point(167, 392));
		inputPoints.add(new Point(84, 28));
		inputPoints.add(new Point(25, 234));
		inputPoints.add(new Point(51, 117));
		inputPoints.add(new Point(43, 45));
		inputPoints.add(new Point(346, 215));
		inputPoints.add(new Point(236, 168));
		inputPoints.add(new Point(496, 434));
		inputPoints.add(new Point(419, 401));
		inputPoints.add(new Point(55, 219));
		inputPoints.add(new Point(471, 131));
		inputPoints.add(new Point(354, 220));
		inputPoints.add(new Point(402, 36));
		inputPoints.add(new Point(173, 299));
		inputPoints.add(new Point(488, 262));
		inputPoints.add(new Point(495, 409));
		inputPoints.add(new Point(234, 330));
		inputPoints.add(new Point(85, 65));
		inputPoints.add(new Point(482, 145));
		inputPoints.add(new Point(14, 57));
		inputPoints.add(new Point(362, 215));
		inputPoints.add(new Point(235, 35));
		inputPoints.add(new Point(440, 28));
		inputPoints.add(new Point(178, 292));
		inputPoints.add(new Point(261, 340));
		inputPoints.add(new Point(294, 86));
		inputPoints.add(new Point(24, 235));
		inputPoints.add(new Point(15, 146));
		inputPoints.add(new Point(393, 227));
		inputPoints.add(new Point(454, 277));
		inputPoints.add(new Point(496, 48));
		inputPoints.add(new Point(224, 399));
		inputPoints.add(new Point(293, 201));
		inputPoints.add(new Point(74, 480));
		inputPoints.add(new Point(379, 95));
		inputPoints.add(new Point(144, 170));
		inputPoints.add(new Point(404, 108));
		inputPoints.add(new Point(52, 380));
		inputPoints.add(new Point(360, 310));
		inputPoints.add(new Point(351, 338));
		inputPoints.add(new Point(448, 240));
		inputPoints.add(new Point(449, 469));
		inputPoints.add(new Point(225, 289));
		inputPoints.add(new Point(384, 14));
		inputPoints.add(new Point(121, 18));
		inputPoints.add(new Point(336, 434));
		inputPoints.add(new Point(334, 31));
		inputPoints.add(new Point(420, 232));
		inputPoints.add(new Point(255, 86));
		inputPoints.add(new Point(482, 225));
		inputPoints.add(new Point(31, 278));
		inputPoints.add(new Point(386, 1));
		inputPoints.add(new Point(78, 182));
		inputPoints.add(new Point(489, 8));
		inputPoints.add(new Point(396, 407));
		inputPoints.add(new Point(6, 268));
		inputPoints.add(new Point(452, 398));
		inputPoints.add(new Point(153, 217));
		inputPoints.add(new Point(232, 268));
		inputPoints.add(new Point(78, 441));
		inputPoints.add(new Point(408, 26));
		inputPoints.add(new Point(61, 280));
		inputPoints.add(new Point(191, 442));
		inputPoints.add(new Point(100, 26));
		inputPoints.add(new Point(359, 201));
		inputPoints.add(new Point(147, 442));
		inputPoints.add(new Point(131, 245));
		inputPoints.add(new Point(33, 444));
		inputPoints.add(new Point(322, 17));
		inputPoints.add(new Point(353, 177));
		inputPoints.add(new Point(420, 87));
		inputPoints.add(new Point(393, 423));
		inputPoints.add(new Point(383, 336));
		inputPoints.add(new Point(249, 273));
		inputPoints.add(new Point(476, 316));
		inputPoints.add(new Point(477, 391));
		inputPoints.add(new Point(8, 194));
		inputPoints.add(new Point(295, 319));
		inputPoints.add(new Point(232, 179));
		inputPoints.add(new Point(150, 47));
		inputPoints.add(new Point(85, 78));
		inputPoints.add(new Point(17, 277));
		inputPoints.add(new Point(457, 437));
		inputPoints.add(new Point(48, 235));
		inputPoints.add(new Point(208, 413));
		inputPoints.add(new Point(352, 342));
		inputPoints.add(new Point(199, 385));
		inputPoints.add(new Point(221, 191));
		inputPoints.add(new Point(489, 98));
		inputPoints.add(new Point(291, 478));
		inputPoints.add(new Point(280, 358));
		inputPoints.add(new Point(217, 377));
		inputPoints.add(new Point(315, 479));
		inputPoints.add(new Point(500, 455));
		inputPoints.add(new Point(14, 422));
		inputPoints.add(new Point(107, 404));
		inputPoints.add(new Point(447, 273));
		inputPoints.add(new Point(151, 470));
		inputPoints.add(new Point(272, 354));
		inputPoints.add(new Point(447, 164));
		inputPoints.add(new Point(449, 88));
		inputPoints.add(new Point(111, 153));
		inputPoints.add(new Point(177, 109));
		inputPoints.add(new Point(163, 310));
		inputPoints.add(new Point(246, 47));
		inputPoints.add(new Point(339, 167));
		inputPoints.add(new Point(351, 174));
		inputPoints.add(new Point(396, 257));
		inputPoints.add(new Point(153, 465));
		inputPoints.add(new Point(450, 384));
		inputPoints.add(new Point(478, 208));
		inputPoints.add(new Point(372, 457));
		inputPoints.add(new Point(89, 158));
		inputPoints.add(new Point(13, 453));
		inputPoints.add(new Point(126, 170));
		inputPoints.add(new Point(205, 458));
		inputPoints.add(new Point(282, 194));
		inputPoints.add(new Point(461, 258));
		inputPoints.add(new Point(286, 244));
		inputPoints.add(new Point(446, 156));
		inputPoints.add(new Point(271, 272));
		inputPoints.add(new Point(263, 282));
		inputPoints.add(new Point(177, 234));
		inputPoints.add(new Point(72, 239));
		inputPoints.add(new Point(379, 462));
		inputPoints.add(new Point(438, 108));
		inputPoints.add(new Point(345, 59));
		inputPoints.add(new Point(105, 210));
		inputPoints.add(new Point(190, 333));
		inputPoints.add(new Point(179, 360));
		inputPoints.add(new Point(247, 336));
		inputPoints.add(new Point(261, 299));
		inputPoints.add(new Point(84, 93));
		inputPoints.add(new Point(139, 203));
		inputPoints.add(new Point(243, 442));
		inputPoints.add(new Point(462, 362));
		inputPoints.add(new Point(110, 83));
		inputPoints.add(new Point(46, 349));
		inputPoints.add(new Point(129, 67));
		inputPoints.add(new Point(362, 279));
		inputPoints.add(new Point(92, 489));
		inputPoints.add(new Point(254, 315));
		inputPoints.add(new Point(218, 166));
		inputPoints.add(new Point(322, 220));
		inputPoints.add(new Point(265, 419));
		inputPoints.add(new Point(34, 21));
		inputPoints.add(new Point(52, 271));
		inputPoints.add(new Point(407, 15));
		inputPoints.add(new Point(166, 71));
		inputPoints.add(new Point(100, 30));
		inputPoints.add(new Point(445, 429));
		inputPoints.add(new Point(156, 202));
		inputPoints.add(new Point(345, 412));
		inputPoints.add(new Point(278, 95));
		inputPoints.add(new Point(268, 482));
		inputPoints.add(new Point(340, 72));
		inputPoints.add(new Point(16, 402));
		inputPoints.add(new Point(4, 198));
		inputPoints.add(new Point(299, 186));
		inputPoints.add(new Point(198, 481));
		inputPoints.add(new Point(468, 356));
		inputPoints.add(new Point(172, 467));
		inputPoints.add(new Point(44, 65));
		inputPoints.add(new Point(2, 278));
		inputPoints.add(new Point(178, 441));
		inputPoints.add(new Point(302, 75));
		inputPoints.add(new Point(476, 297));
		inputPoints.add(new Point(236, 201));
		inputPoints.add(new Point(91, 4));
		inputPoints.add(new Point(458, 149));
		inputPoints.add(new Point(441, 254));
		inputPoints.add(new Point(137, 66));
		inputPoints.add(new Point(215, 169));
		inputPoints.add(new Point(404, 245));
		inputPoints.add(new Point(356, 355));
		inputPoints.add(new Point(77, 238));
		inputPoints.add(new Point(479, 308));
		inputPoints.add(new Point(199, 216));
		inputPoints.add(new Point(306, 384));
		inputPoints.add(new Point(59, 107));
		inputPoints.add(new Point(298, 33));
		inputPoints.add(new Point(311, 476));
		inputPoints.add(new Point(4, 222));
		inputPoints.add(new Point(368, 125));
		inputPoints.add(new Point(0, 444));
		inputPoints.add(new Point(191, 333));
		inputPoints.add(new Point(468, 34));
		inputPoints.add(new Point(253, 54));
		inputPoints.add(new Point(89, 81));
		inputPoints.add(new Point(276, 438));
		inputPoints.add(new Point(52, 76));
		inputPoints.add(new Point(152, 288));
		inputPoints.add(new Point(116, 463));
		inputPoints.add(new Point(427, 493));
		inputPoints.add(new Point(409, 361));
		inputPoints.add(new Point(252, 272));
		inputPoints.add(new Point(436, 1));
		inputPoints.add(new Point(208, 462));
		inputPoints.add(new Point(487, 40));
		inputPoints.add(new Point(178, 191));
		inputPoints.add(new Point(262, 223));
		inputPoints.add(new Point(400, 62));
		inputPoints.add(new Point(64, 142));
		inputPoints.add(new Point(336, 379));
		inputPoints.add(new Point(165, 56));
		inputPoints.add(new Point(352, 457));
		inputPoints.add(new Point(132, 225));
		inputPoints.add(new Point(79, 69));
		inputPoints.add(new Point(134, 27));
		inputPoints.add(new Point(479, 212));
		inputPoints.add(new Point(306, 2));
		inputPoints.add(new Point(13, 486));
		inputPoints.add(new Point(247, 423));
		inputPoints.add(new Point(79, 163));
		inputPoints.add(new Point(458, 365));
		inputPoints.add(new Point(55, 466));
		inputPoints.add(new Point(488, 159));
		inputPoints.add(new Point(207, 55));
		inputPoints.add(new Point(325, 68));
		inputPoints.add(new Point(103, 25));
		inputPoints.add(new Point(308, 428));
		inputPoints.add(new Point(475, 82));
		inputPoints.add(new Point(128, 453));
		inputPoints.add(new Point(273, 369));
		inputPoints.add(new Point(218, 329));
		inputPoints.add(new Point(386, 290));
		inputPoints.add(new Point(31, 190));
		inputPoints.add(new Point(237, 7));
		inputPoints.add(new Point(9, 493));
		inputPoints.add(new Point(21, 409));
		inputPoints.add(new Point(37, 481));
		inputPoints.add(new Point(142, 156));
		inputPoints.add(new Point(439, 396));
		inputPoints.add(new Point(255, 28));
		inputPoints.add(new Point(332, 84));
		inputPoints.add(new Point(126, 30));
		inputPoints.add(new Point(223, 458));
		inputPoints.add(new Point(296, 284));
		inputPoints.add(new Point(154, 378));
		inputPoints.add(new Point(108, 18));
		inputPoints.add(new Point(489, 118));
		inputPoints.add(new Point(491, 38));
		inputPoints.add(new Point(13, 475));
		inputPoints.add(new Point(374, 444));
		inputPoints.add(new Point(342, 430));
		inputPoints.add(new Point(41, 18));
		inputPoints.add(new Point(334, 44));
		inputPoints.add(new Point(140, 317));
		inputPoints.add(new Point(299, 90));
		inputPoints.add(new Point(386, 285));
		inputPoints.add(new Point(346, 222));
		inputPoints.add(new Point(437, 273));
		inputPoints.add(new Point(143, 20));
		inputPoints.add(new Point(175, 440));
		inputPoints.add(new Point(203, 291));
		inputPoints.add(new Point(218, 200));
		inputPoints.add(new Point(1, 374));
		inputPoints.add(new Point(342, 63));
		inputPoints.add(new Point(155, 374));
		inputPoints.add(new Point(335, 154));
		inputPoints.add(new Point(294, 176));
		inputPoints.add(new Point(255, 14));
		inputPoints.add(new Point(38, 183));
		inputPoints.add(new Point(319, 256));
		inputPoints.add(new Point(54, 435));
		inputPoints.add(new Point(319, 190));
		inputPoints.add(new Point(324, 482));
		inputPoints.add(new Point(33, 221));
		inputPoints.add(new Point(486, 211));
		inputPoints.add(new Point(162, 262));
		inputPoints.add(new Point(198, 442));
		inputPoints.add(new Point(149, 284));
		inputPoints.add(new Point(300, 167));
		inputPoints.add(new Point(349, 388));
		inputPoints.add(new Point(493, 438));
		inputPoints.add(new Point(56, 195));
		inputPoints.add(new Point(388, 112));
		inputPoints.add(new Point(425, 97));
		inputPoints.add(new Point(396, 423));
		inputPoints.add(new Point(483, 124));
		inputPoints.add(new Point(27, 380));
		inputPoints.add(new Point(284, 172));
		inputPoints.add(new Point(338, 434));
		inputPoints.add(new Point(104, 86));
		inputPoints.add(new Point(304, 467));
		inputPoints.add(new Point(96, 423));
		inputPoints.add(new Point(200, 114));
		inputPoints.add(new Point(453, 71));
		inputPoints.add(new Point(37, 258));
		inputPoints.add(new Point(270, 80));
		inputPoints.add(new Point(71, 142));
		inputPoints.add(new Point(346, 271));
		inputPoints.add(new Point(71, 324));
		inputPoints.add(new Point(49, 160));
		inputPoints.add(new Point(156, 113));
		inputPoints.add(new Point(450, 195));
		inputPoints.add(new Point(479, 219));
		inputPoints.add(new Point(358, 218));
		inputPoints.add(new Point(191, 345));
		inputPoints.add(new Point(486, 357));
		inputPoints.add(new Point(320, 371));
		inputPoints.add(new Point(357, 480));
		inputPoints.add(new Point(36, 142));
		inputPoints.add(new Point(374, 469));
		inputPoints.add(new Point(432, 331));
		inputPoints.add(new Point(179, 90));
		inputPoints.add(new Point(70, 463));
		inputPoints.add(new Point(220, 411));
		inputPoints.add(new Point(252, 464));
		inputPoints.add(new Point(462, 415));
		inputPoints.add(new Point(242, 376));
		inputPoints.add(new Point(328, 295));
		inputPoints.add(new Point(393, 455));
		inputPoints.add(new Point(444, 151));
		inputPoints.add(new Point(450, 91));
		inputPoints.add(new Point(255, 404));
		inputPoints.add(new Point(234, 378));
		inputPoints.add(new Point(281, 14));
		inputPoints.add(new Point(77, 89));
		inputPoints.add(new Point(206, 42));
		inputPoints.add(new Point(469, 485));
		inputPoints.add(new Point(120, 429));
		inputPoints.add(new Point(230, 142));
		inputPoints.add(new Point(467, 145));
		inputPoints.add(new Point(282, 234));
		inputPoints.add(new Point(385, 479));
		inputPoints.add(new Point(252, 497));
		inputPoints.add(new Point(174, 93));
		inputPoints.add(new Point(259, 379));
		inputPoints.add(new Point(228, 170));
		inputPoints.add(new Point(45, 81));
		inputPoints.add(new Point(114, 417));
		inputPoints.add(new Point(252, 45));
		inputPoints.add(new Point(87, 482));
		inputPoints.add(new Point(454, 275));
		inputPoints.add(new Point(472, 472));
		inputPoints.add(new Point(449, 205));
		inputPoints.add(new Point(221, 76));
		inputPoints.add(new Point(363, 68));
		inputPoints.add(new Point(10, 120));
		inputPoints.add(new Point(123, 142));
		inputPoints.add(new Point(31, 34));
		inputPoints.add(new Point(249, 217));
		inputPoints.add(new Point(84, 486));
		inputPoints.add(new Point(487, 480));
		inputPoints.add(new Point(279, 443));
		inputPoints.add(new Point(263, 384));
		inputPoints.add(new Point(10, 404));
		inputPoints.add(new Point(391, 426));
		inputPoints.add(new Point(484, 302));
		inputPoints.add(new Point(158, 159));
		inputPoints.add(new Point(439, 463));
		inputPoints.add(new Point(78, 189));
		inputPoints.add(new Point(395, 88));
		inputPoints.add(new Point(133, 178));
		inputPoints.add(new Point(307, 411));
		inputPoints.add(new Point(348, 288));
		inputPoints.add(new Point(401, 244));
		inputPoints.add(new Point(351, 420));
		inputPoints.add(new Point(188, 485));
		inputPoints.add(new Point(77, 446));
		inputPoints.add(new Point(356, 8));
		inputPoints.add(new Point(52, 303));
		inputPoints.add(new Point(479, 68));
		inputPoints.add(new Point(352, 68));
		inputPoints.add(new Point(135, 346));
		inputPoints.add(new Point(402, 239));
		inputPoints.add(new Point(472, 319));
		inputPoints.add(new Point(341, 192));
		inputPoints.add(new Point(71, 252));
		inputPoints.add(new Point(350, 410));
		inputPoints.add(new Point(137, 371));
		inputPoints.add(new Point(72, 442));
		inputPoints.add(new Point(40, 241));
		inputPoints.add(new Point(449, 232));
		inputPoints.add(new Point(162, 365));
		inputPoints.add(new Point(95, 77));
		inputPoints.add(new Point(216, 98));
		inputPoints.add(new Point(233, 366));
		inputPoints.add(new Point(349, 421));
		inputPoints.add(new Point(473, 451));
		inputPoints.add(new Point(99, 98));
		inputPoints.add(new Point(188, 251));
		inputPoints.add(new Point(460, 76));
		inputPoints.add(new Point(137, 82));
		inputPoints.add(new Point(63, 122));
		inputPoints.add(new Point(167, 437));
		inputPoints.add(new Point(485, 384));
		inputPoints.add(new Point(414, 428));
		inputPoints.add(new Point(252, 353));
		inputPoints.add(new Point(363, 283));
		inputPoints.add(new Point(167, 212));
		inputPoints.add(new Point(425, 437));
		inputPoints.add(new Point(125, 471));
		inputPoints.add(new Point(217, 469));
		inputPoints.add(new Point(251, 223));
		inputPoints.add(new Point(298, 288));
		inputPoints.add(new Point(118, 213));
		inputPoints.add(new Point(368, 66));
		inputPoints.add(new Point(172, 144));
		inputPoints.add(new Point(256, 28));
		inputPoints.add(new Point(453, 265));
		inputPoints.add(new Point(418, 24));
		inputPoints.add(new Point(184, 221));
		inputPoints.add(new Point(169, 175));
		inputPoints.add(new Point(187, 490));
		inputPoints.add(new Point(61, 121));
		inputPoints.add(new Point(331, 174));
		inputPoints.add(new Point(50, 137));
		inputPoints.add(new Point(302, 168));
		inputPoints.add(new Point(39, 315));
		inputPoints.add(new Point(34, 320));
		inputPoints.add(new Point(476, 292));
		inputPoints.add(new Point(316, 442));
		inputPoints.add(new Point(335, 382));
		inputPoints.add(new Point(54, 498));
		inputPoints.add(new Point(443, 174));
		inputPoints.add(new Point(344, 202));
		inputPoints.add(new Point(497, 36));
		inputPoints.add(new Point(450, 269));
		inputPoints.add(new Point(75, 136));
		inputPoints.add(new Point(201, 216));
		inputPoints.add(new Point(313, 347));
		inputPoints.add(new Point(3, 119));
		inputPoints.add(new Point(64, 10));
		inputPoints.add(new Point(133, 492));
		inputPoints.add(new Point(317, 22));
		inputPoints.add(new Point(468, 47));
		inputPoints.add(new Point(125, 144));
		inputPoints.add(new Point(181, 179));
		inputPoints.add(new Point(328, 307));
		inputPoints.add(new Point(62, 211));
		inputPoints.add(new Point(334, 430));
		inputPoints.add(new Point(4, 306));
		inputPoints.add(new Point(338, 455));
		inputPoints.add(new Point(199, 412));
		inputPoints.add(new Point(355, 125));
		inputPoints.add(new Point(312, 55));
		inputPoints.add(new Point(118, 486));
		inputPoints.add(new Point(144, 225));
		inputPoints.add(new Point(43, 355));
		inputPoints.add(new Point(160, 85));
		inputPoints.add(new Point(494, 232));
		inputPoints.add(new Point(321, 335));
		inputPoints.add(new Point(465, 100));
		inputPoints.add(new Point(262, 167));
		inputPoints.add(new Point(13, 178));
		inputPoints.add(new Point(360, 454));
		inputPoints.add(new Point(448, 185));
		inputPoints.add(new Point(55, 291));
		inputPoints.add(new Point(0, 281));
		inputPoints.add(new Point(461, 135));
		inputPoints.add(new Point(406, 437));
		inputPoints.add(new Point(296, 171));
		inputPoints.add(new Point(316, 384));
		inputPoints.add(new Point(119, 458));
		inputPoints.add(new Point(352, 341));
		inputPoints.add(new Point(489, 236));
		inputPoints.add(new Point(351, 311));
		inputPoints.add(new Point(379, 118));
		inputPoints.add(new Point(481, 88));
		inputPoints.add(new Point(63, 196));
		inputPoints.add(new Point(91, 352));
		inputPoints.add(new Point(15, 195));
		inputPoints.add(new Point(291, 96));
		inputPoints.add(new Point(483, 222));
		inputPoints.add(new Point(289, 41));
		inputPoints.add(new Point(371, 16));
		inputPoints.add(new Point(118, 129));
		inputPoints.add(new Point(187, 181));
		inputPoints.add(new Point(369, 411));
		inputPoints.add(new Point(310, 282));
		inputPoints.add(new Point(231, 311));
		inputPoints.add(new Point(80, 282));
		inputPoints.add(new Point(105, 346));
		inputPoints.add(new Point(336, 222));
		inputPoints.add(new Point(261, 3));
		inputPoints.add(new Point(149, 105));
		inputPoints.add(new Point(303, 411));
		inputPoints.add(new Point(116, 202));
		inputPoints.add(new Point(249, 488));
		inputPoints.add(new Point(426, 413));
		inputPoints.add(new Point(129, 282));
		inputPoints.add(new Point(476, 29));
		inputPoints.add(new Point(260, 340));
		inputPoints.add(new Point(280, 242));
		inputPoints.add(new Point(486, 457));
		inputPoints.add(new Point(98, 263));
		inputPoints.add(new Point(415, 482));
		inputPoints.add(new Point(357, 109));
		inputPoints.add(new Point(409, 343));
		inputPoints.add(new Point(87, 70));
		inputPoints.add(new Point(363, 316));
		inputPoints.add(new Point(245, 176));
		inputPoints.add(new Point(418, 52));
		inputPoints.add(new Point(450, 328));
		inputPoints.add(new Point(494, 264));
		inputPoints.add(new Point(89, 415));
		inputPoints.add(new Point(396, 275));
		inputPoints.add(new Point(335, 51));
		inputPoints.add(new Point(494, 374));
		inputPoints.add(new Point(31, 462));
		inputPoints.add(new Point(104, 433));
		inputPoints.add(new Point(385, 258));
		inputPoints.add(new Point(420, 239));
		inputPoints.add(new Point(203, 248));
		inputPoints.add(new Point(142, 233));
		inputPoints.add(new Point(249, 289));
		inputPoints.add(new Point(241, 72));
		inputPoints.add(new Point(135, 439));
		inputPoints.add(new Point(340, 404));
		inputPoints.add(new Point(118, 136));
		inputPoints.add(new Point(185, 497));
		inputPoints.add(new Point(332, 440));
		inputPoints.add(new Point(385, 409));
		inputPoints.add(new Point(10, 49));
		inputPoints.add(new Point(252, 412));
		inputPoints.add(new Point(455, 92));
		inputPoints.add(new Point(396, 274));
		inputPoints.add(new Point(270, 325));
		inputPoints.add(new Point(440, 342));
		inputPoints.add(new Point(56, 75));
		inputPoints.add(new Point(27, 470));
		inputPoints.add(new Point(140, 292));
		inputPoints.add(new Point(120, 384));
		inputPoints.add(new Point(264, 69));
		inputPoints.add(new Point(209, 207));
		inputPoints.add(new Point(334, 284));
		inputPoints.add(new Point(363, 131));
		inputPoints.add(new Point(377, 232));
		inputPoints.add(new Point(135, 498));
		inputPoints.add(new Point(79, 294));
		inputPoints.add(new Point(65, 101));
		inputPoints.add(new Point(118, 436));
		inputPoints.add(new Point(370, 436));
		inputPoints.add(new Point(373, 419));
		inputPoints.add(new Point(360, 18));
		inputPoints.add(new Point(319, 217));
		inputPoints.add(new Point(316, 26));
		inputPoints.add(new Point(189, 195));
		inputPoints.add(new Point(24, 436));
		inputPoints.add(new Point(432, 497));
		inputPoints.add(new Point(204, 429));
		inputPoints.add(new Point(12, 217));
		inputPoints.add(new Point(149, 83));
		inputPoints.add(new Point(2, 397));
		inputPoints.add(new Point(216, 177));
		inputPoints.add(new Point(25, 443));
		inputPoints.add(new Point(440, 463));
		inputPoints.add(new Point(363, 342));
		inputPoints.add(new Point(66, 397));
		inputPoints.add(new Point(14, 288));
		inputPoints.add(new Point(148, 274));
		inputPoints.add(new Point(350, 244));
		inputPoints.add(new Point(96, 198));
		inputPoints.add(new Point(437, 11));
		inputPoints.add(new Point(251, 286));
		inputPoints.add(new Point(101, 384));
		inputPoints.add(new Point(129, 57));
		inputPoints.add(new Point(383, 188));
		inputPoints.add(new Point(358, 343));
		inputPoints.add(new Point(452, 74));
		inputPoints.add(new Point(334, 401));
		inputPoints.add(new Point(442, 259));
		inputPoints.add(new Point(271, 92));
		inputPoints.add(new Point(70, 102));
		inputPoints.add(new Point(160, 156));
		inputPoints.add(new Point(332, 379));
		inputPoints.add(new Point(59, 83));
		inputPoints.add(new Point(66, 177));
		inputPoints.add(new Point(393, 302));
		inputPoints.add(new Point(29, 249));
		inputPoints.add(new Point(489, 368));
		inputPoints.add(new Point(495, 258));
		inputPoints.add(new Point(329, 106));
		inputPoints.add(new Point(187, 242));
		inputPoints.add(new Point(386, 69));
		inputPoints.add(new Point(316, 157));
		inputPoints.add(new Point(127, 50));
		inputPoints.add(new Point(32, 201));
		inputPoints.add(new Point(138, 56));
		inputPoints.add(new Point(99, 57));
		inputPoints.add(new Point(167, 34));
		inputPoints.add(new Point(365, 335));
		inputPoints.add(new Point(226, 91));
		inputPoints.add(new Point(254, 77));
		inputPoints.add(new Point(24, 414));
		inputPoints.add(new Point(402, 81));
		inputPoints.add(new Point(294, 477));
		inputPoints.add(new Point(380, 105));
		inputPoints.add(new Point(470, 121));
		inputPoints.add(new Point(103, 393));
		inputPoints.add(new Point(462, 86));
		inputPoints.add(new Point(468, 124));
		inputPoints.add(new Point(409, 20));
		inputPoints.add(new Point(197, 90));
		inputPoints.add(new Point(458, 96));
		inputPoints.add(new Point(225, 75));
		inputPoints.add(new Point(469, 403));
		inputPoints.add(new Point(270, 315));
		inputPoints.add(new Point(142, 64));
		inputPoints.add(new Point(384, 288));
		inputPoints.add(new Point(195, 409));
		inputPoints.add(new Point(237, 351));
		inputPoints.add(new Point(496, 112));
		inputPoints.add(new Point(289, 63));
		inputPoints.add(new Point(181, 422));
		inputPoints.add(new Point(500, 448));
		inputPoints.add(new Point(66, 249));
		inputPoints.add(new Point(494, 71));
		inputPoints.add(new Point(1, 4));
		inputPoints.add(new Point(317, 157));
		inputPoints.add(new Point(217, 46));
		inputPoints.add(new Point(202, 13));
		inputPoints.add(new Point(98, 146));
		inputPoints.add(new Point(33, 389));
		inputPoints.add(new Point(296, 115));
		inputPoints.add(new Point(411, 133));
		inputPoints.add(new Point(274, 463));
		inputPoints.add(new Point(24, 447));
		inputPoints.add(new Point(122, 500));
		inputPoints.add(new Point(310, 207));
		inputPoints.add(new Point(262, 127));
		inputPoints.add(new Point(311, 373));
		inputPoints.add(new Point(364, 61));
		inputPoints.add(new Point(319, 0));
		inputPoints.add(new Point(280, 282));
		inputPoints.add(new Point(405, 417));
		inputPoints.add(new Point(55, 131));
		inputPoints.add(new Point(437, 404));
		inputPoints.add(new Point(297, 444));
		inputPoints.add(new Point(53, 264));
		inputPoints.add(new Point(261, 184));
		inputPoints.add(new Point(191, 95));
		inputPoints.add(new Point(114, 363));
		inputPoints.add(new Point(341, 68));
		inputPoints.add(new Point(110, 386));
		inputPoints.add(new Point(183, 258));
		inputPoints.add(new Point(431, 140));
		inputPoints.add(new Point(239, 234));
		inputPoints.add(new Point(124, 450));
		inputPoints.add(new Point(345, 74));
		inputPoints.add(new Point(409, 209));
		inputPoints.add(new Point(87, 141));
		inputPoints.add(new Point(356, 306));
		inputPoints.add(new Point(45, 346));
		inputPoints.add(new Point(3, 439));
		inputPoints.add(new Point(352, 161));
		inputPoints.add(new Point(239, 451));
		inputPoints.add(new Point(12, 383));
		inputPoints.add(new Point(426, 153));
		inputPoints.add(new Point(465, 35));
		inputPoints.add(new Point(374, 25));
		inputPoints.add(new Point(255, 137));
		inputPoints.add(new Point(256, 280));
		inputPoints.add(new Point(297, 353));
		inputPoints.add(new Point(458, 366));
		inputPoints.add(new Point(200, 206));
		inputPoints.add(new Point(277, 104));
		inputPoints.add(new Point(295, 209));
		inputPoints.add(new Point(144, 350));
		inputPoints.add(new Point(298, 52));
		inputPoints.add(new Point(273, 113));
		inputPoints.add(new Point(319, 160));
		inputPoints.add(new Point(451, 330));
		inputPoints.add(new Point(331, 388));
		inputPoints.add(new Point(136, 218));
		inputPoints.add(new Point(242, 246));
		inputPoints.add(new Point(96, 358));
		inputPoints.add(new Point(179, 451));
		inputPoints.add(new Point(338, 260));
		inputPoints.add(new Point(392, 24));
		inputPoints.add(new Point(182, 83));
		inputPoints.add(new Point(228, 76));
		inputPoints.add(new Point(120, 130));
		inputPoints.add(new Point(298, 82));
		inputPoints.add(new Point(206, 56));
		inputPoints.add(new Point(400, 246));
		inputPoints.add(new Point(129, 337));
		inputPoints.add(new Point(316, 325));
		inputPoints.add(new Point(110, 404));
		inputPoints.add(new Point(117, 346));
		inputPoints.add(new Point(384, 101));
		inputPoints.add(new Point(462, 161));
		inputPoints.add(new Point(481, 404));
		inputPoints.add(new Point(244, 65));
		inputPoints.add(new Point(295, 6));
		inputPoints.add(new Point(296, 488));
		inputPoints.add(new Point(365, 39));
		inputPoints.add(new Point(300, 349));
		inputPoints.add(new Point(403, 252));
		inputPoints.add(new Point(43, 343));
		inputPoints.add(new Point(447, 451));
		inputPoints.add(new Point(375, 75));
		inputPoints.add(new Point(461, 200));
		inputPoints.add(new Point(40, 350));
		inputPoints.add(new Point(42, 358));
		inputPoints.add(new Point(441, 256));
		inputPoints.add(new Point(364, 98));
		inputPoints.add(new Point(37, 266));
		inputPoints.add(new Point(40, 183));
		inputPoints.add(new Point(116, 318));
		inputPoints.add(new Point(99, 180));
		inputPoints.add(new Point(230, 190));
		inputPoints.add(new Point(384, 369));
		inputPoints.add(new Point(263, 373));
		inputPoints.add(new Point(252, 488));
		inputPoints.add(new Point(18, 80));
		inputPoints.add(new Point(286, 354));
		inputPoints.add(new Point(235, 457));
		inputPoints.add(new Point(227, 248));
		inputPoints.add(new Point(224, 453));
		inputPoints.add(new Point(275, 72));
		inputPoints.add(new Point(140, 398));
		inputPoints.add(new Point(232, 446));
		inputPoints.add(new Point(423, 471));
		inputPoints.add(new Point(197, 17));
		inputPoints.add(new Point(449, 312));
		inputPoints.add(new Point(386, 400));
		inputPoints.add(new Point(337, 307));
		inputPoints.add(new Point(27, 94));
		inputPoints.add(new Point(261, 153));
		inputPoints.add(new Point(351, 102));
		inputPoints.add(new Point(443, 216));
		inputPoints.add(new Point(349, 376));
		inputPoints.add(new Point(482, 191));
		inputPoints.add(new Point(336, 61));
		inputPoints.add(new Point(432, 169));
		inputPoints.add(new Point(56, 426));
		inputPoints.add(new Point(44, 220));
		inputPoints.add(new Point(105, 334));
		inputPoints.add(new Point(306, 304));
		inputPoints.add(new Point(183, 417));
		inputPoints.add(new Point(481, 128));
		inputPoints.add(new Point(443, 425));
		inputPoints.add(new Point(1, 141));
		inputPoints.add(new Point(190, 149));
		inputPoints.add(new Point(211, 476));
		inputPoints.add(new Point(47, 402));
		inputPoints.add(new Point(471, 289));
		inputPoints.add(new Point(477, 436));
		inputPoints.add(new Point(88, 34));
		inputPoints.add(new Point(263, 81));
		inputPoints.add(new Point(465, 354));
		inputPoints.add(new Point(133, 291));
		inputPoints.add(new Point(172, 342));
		inputPoints.add(new Point(156, 193));
		inputPoints.add(new Point(104, 17));
		inputPoints.add(new Point(141, 193));
		inputPoints.add(new Point(234, 318));
		inputPoints.add(new Point(326, 361));
		inputPoints.add(new Point(44, 207));
		inputPoints.add(new Point(379, 250));
		inputPoints.add(new Point(19, 199));
		inputPoints.add(new Point(43, 47));
		inputPoints.add(new Point(189, 64));
		inputPoints.add(new Point(109, 39));
		inputPoints.add(new Point(222, 130));
		inputPoints.add(new Point(337, 282));
		inputPoints.add(new Point(258, 493));
		inputPoints.add(new Point(270, 439));
		inputPoints.add(new Point(18, 53));
		inputPoints.add(new Point(220, 405));
		inputPoints.add(new Point(279, 482));
		inputPoints.add(new Point(320, 357));
		inputPoints.add(new Point(18, 103));
		inputPoints.add(new Point(448, 366));
		inputPoints.add(new Point(113, 447));
		inputPoints.add(new Point(412, 320));
		inputPoints.add(new Point(77, 153));
		inputPoints.add(new Point(403, 441));
		inputPoints.add(new Point(120, 325));
		inputPoints.add(new Point(106, 94));
		inputPoints.add(new Point(332, 386));
		inputPoints.add(new Point(350, 297));
		inputPoints.add(new Point(480, 282));
		inputPoints.add(new Point(137, 341));
		inputPoints.add(new Point(64, 425));
		inputPoints.add(new Point(191, 497));
		inputPoints.add(new Point(318, 195));
		inputPoints.add(new Point(283, 10));
		inputPoints.add(new Point(21, 79));
		inputPoints.add(new Point(275, 441));
		inputPoints.add(new Point(396, 123));
		inputPoints.add(new Point(312, 376));
		inputPoints.add(new Point(364, 133));
		inputPoints.add(new Point(251, 31));
		inputPoints.add(new Point(126, 476));
		inputPoints.add(new Point(31, 1));
		inputPoints.add(new Point(454, 178));
		inputPoints.add(new Point(254, 499));
		inputPoints.add(new Point(434, 250));
		inputPoints.add(new Point(109, 462));
		inputPoints.add(new Point(280, 290));
		inputPoints.add(new Point(218, 343));
		inputPoints.add(new Point(144, 70));
		inputPoints.add(new Point(94, 357));
		inputPoints.add(new Point(420, 10));
		inputPoints.add(new Point(438, 434));
		inputPoints.add(new Point(109, 423));
		inputPoints.add(new Point(211, 331));
		inputPoints.add(new Point(29, 12));
		inputPoints.add(new Point(469, 116));
		inputPoints.add(new Point(393, 344));
		inputPoints.add(new Point(58, 268));
		inputPoints.add(new Point(1, 364));
		inputPoints.add(new Point(358, 210));
		inputPoints.add(new Point(157, 137));
		inputPoints.add(new Point(281, 260));
		inputPoints.add(new Point(16, 153));
		inputPoints.add(new Point(116, 364));
		inputPoints.add(new Point(241, 94));
		inputPoints.add(new Point(474, 35));
		inputPoints.add(new Point(29, 337));
		inputPoints.add(new Point(14, 451));
		inputPoints.add(new Point(258, 395));
		inputPoints.add(new Point(326, 36));
		inputPoints.add(new Point(397, 446));
		inputPoints.add(new Point(152, 281));
		inputPoints.add(new Point(173, 82));
		inputPoints.add(new Point(78, 364));
		inputPoints.add(new Point(430, 498));
		inputPoints.add(new Point(323, 17));
		inputPoints.add(new Point(448, 98));
		inputPoints.add(new Point(409, 299));
		inputPoints.add(new Point(256, 127));
		inputPoints.add(new Point(429, 96));
		inputPoints.add(new Point(304, 417));
		inputPoints.add(new Point(226, 168));
		inputPoints.add(new Point(494, 394));
		inputPoints.add(new Point(399, 235));
		inputPoints.add(new Point(102, 377));
		inputPoints.add(new Point(477, 323));
		inputPoints.add(new Point(137, 103));
		inputPoints.add(new Point(458, 459));
		inputPoints.add(new Point(65, 345));
		inputPoints.add(new Point(171, 79));
		inputPoints.add(new Point(198, 79));
		inputPoints.add(new Point(35, 378));
		inputPoints.add(new Point(17, 128));
		inputPoints.add(new Point(378, 276));
		inputPoints.add(new Point(170, 246));
		inputPoints.add(new Point(310, 386));
		inputPoints.add(new Point(81, 120));
		inputPoints.add(new Point(9, 386));
		inputPoints.add(new Point(142, 397));
		inputPoints.add(new Point(282, 328));
		inputPoints.add(new Point(409, 177));
		inputPoints.add(new Point(195, 54));
		inputPoints.add(new Point(252, 32));
		inputPoints.add(new Point(409, 69));
		inputPoints.add(new Point(239, 45));
		inputPoints.add(new Point(253, 474));
		inputPoints.add(new Point(451, 417));
		inputPoints.add(new Point(338, 429));
		inputPoints.add(new Point(210, 105));
		inputPoints.add(new Point(226, 208));
		inputPoints.add(new Point(45, 386));
		inputPoints.add(new Point(119, 425));
		inputPoints.add(new Point(186, 294));
		inputPoints.add(new Point(332, 247));
		inputPoints.add(new Point(45, 378));
		inputPoints.add(new Point(227, 101));
		inputPoints.add(new Point(249, 1));
		inputPoints.add(new Point(275, 190));
		inputPoints.add(new Point(359, 117));
		inputPoints.add(new Point(131, 327));
		inputPoints.add(new Point(307, 170));
		inputPoints.add(new Point(175, 86));
		inputPoints.add(new Point(337, 219));
		inputPoints.add(new Point(1, 202));
		inputPoints.add(new Point(246, 280));
		inputPoints.add(new Point(242, 391));
		inputPoints.add(new Point(133, 353));
		inputPoints.add(new Point(453, 142));
		inputPoints.add(new Point(327, 22));
		inputPoints.add(new Point(296, 477));
		inputPoints.add(new Point(423, 320));
		inputPoints.add(new Point(323, 448));
		inputPoints.add(new Point(102, 443));
		inputPoints.add(new Point(1, 267));
		inputPoints.add(new Point(36, 387));
		inputPoints.add(new Point(91, 170));
		inputPoints.add(new Point(289, 102));
		inputPoints.add(new Point(78, 35));
		inputPoints.add(new Point(160, 341));
		inputPoints.add(new Point(342, 358));
		inputPoints.add(new Point(269, 398));
		inputPoints.add(new Point(244, 3));
		inputPoints.add(new Point(445, 285));
		inputPoints.add(new Point(334, 288));
		inputPoints.add(new Point(278, 269));
		inputPoints.add(new Point(65, 55));
		inputPoints.add(new Point(97, 487));
		inputPoints.add(new Point(259, 101));
		inputPoints.add(new Point(241, 383));
		inputPoints.add(new Point(26, 23));
		inputPoints.add(new Point(488, 360));
		inputPoints.add(new Point(111, 426));
		inputPoints.add(new Point(88, 497));
		inputPoints.add(new Point(89, 388));
		inputPoints.add(new Point(499, 269));
		inputPoints.add(new Point(218, 199));
		inputPoints.add(new Point(362, 451));
		inputPoints.add(new Point(446, 40));
		inputPoints.add(new Point(57, 421));
		inputPoints.add(new Point(245, 70));
		inputPoints.add(new Point(47, 396));
		inputPoints.add(new Point(19, 358));
		inputPoints.add(new Point(412, 152));
		inputPoints.add(new Point(121, 263));
		inputPoints.add(new Point(238, 118));
		inputPoints.add(new Point(426, 452));
		inputPoints.add(new Point(248, 173));
		inputPoints.add(new Point(123, 219));
		inputPoints.add(new Point(213, 430));
		inputPoints.add(new Point(349, 109));
		inputPoints.add(new Point(452, 234));
		inputPoints.add(new Point(253, 27));
		inputPoints.add(new Point(162, 176));
		inputPoints.add(new Point(361, 310));
		inputPoints.add(new Point(391, 246));
		inputPoints.add(new Point(299, 250));
		inputPoints.add(new Point(255, 298));
		inputPoints.add(new Point(187, 249));
		inputPoints.add(new Point(161, 407));
		inputPoints.add(new Point(498, 221));
		inputPoints.add(new Point(432, 413));
		inputPoints.add(new Point(291, 442));
		inputPoints.add(new Point(344, 118));
		inputPoints.add(new Point(64, 256));
		inputPoints.add(new Point(244, 163));
		inputPoints.add(new Point(123, 399));
		inputPoints.add(new Point(210, 278));
		inputPoints.add(new Point(34, 18));
		inputPoints.add(new Point(332, 54));
		inputPoints.add(new Point(184, 410));
		inputPoints.add(new Point(179, 168));
		inputPoints.add(new Point(49, 497));
		inputPoints.add(new Point(37, 492));
		inputPoints.add(new Point(133, 6));
		inputPoints.add(new Point(77, 228));
		inputPoints.add(new Point(8, 359));
		inputPoints.add(new Point(139, 391));
		inputPoints.add(new Point(438, 418));
		inputPoints.add(new Point(73, 112));
		inputPoints.add(new Point(300, 11));
		inputPoints.add(new Point(259, 293));
		inputPoints.add(new Point(155, 103));
		inputPoints.add(new Point(28, 339));
		inputPoints.add(new Point(35, 5));
		inputPoints.add(new Point(183, 436));
		inputPoints.add(new Point(257, 81));
		inputPoints.add(new Point(390, 429));
		inputPoints.add(new Point(267, 181));
		inputPoints.add(new Point(7, 57));
		inputPoints.add(new Point(86, 440));
		inputPoints.add(new Point(422, 27));
		inputPoints.add(new Point(277, 461));
		inputPoints.add(new Point(259, 144));
		inputPoints.add(new Point(345, 141));
		inputPoints.add(new Point(370, 109));
		inputPoints.add(new Point(196, 452));
		inputPoints.add(new Point(121, 492));
		inputPoints.add(new Point(53, 214));
		inputPoints.add(new Point(80, 484));
		inputPoints.add(new Point(338, 20));
		inputPoints.add(new Point(407, 153));
		inputPoints.add(new Point(290, 115));
		inputPoints.add(new Point(425, 384));
		inputPoints.add(new Point(116, 274));
		inputPoints.add(new Point(375, 55));
		inputPoints.add(new Point(222, 316));
		inputPoints.add(new Point(93, 423));
		inputPoints.add(new Point(47, 303));
		inputPoints.add(new Point(384, 29));
		inputPoints.add(new Point(46, 27));
		inputPoints.add(new Point(209, 371));
		inputPoints.add(new Point(228, 244));
		inputPoints.add(new Point(373, 304));
		inputPoints.add(new Point(73, 163));
		inputPoints.add(new Point(488, 100));
		inputPoints.add(new Point(339, 290));
		inputPoints.add(new Point(182, 400));
		inputPoints.add(new Point(441, 351));
		inputPoints.add(new Point(23, 211));
		inputPoints.add(new Point(384, 136));
		inputPoints.add(new Point(227, 15));
		inputPoints.add(new Point(288, 43));
		inputPoints.add(new Point(126, 366));
		inputPoints.add(new Point(461, 363));
		inputPoints.add(new Point(485, 386));
		inputPoints.add(new Point(40, 339));
		inputPoints.add(new Point(490, 395));
		inputPoints.add(new Point(484, 47));
		inputPoints.add(new Point(447, 242));
		inputPoints.add(new Point(343, 242));
		inputPoints.add(new Point(497, 192));
		inputPoints.add(new Point(136, 242));
		inputPoints.add(new Point(475, 348));
		inputPoints.add(new Point(253, 311));
		inputPoints.add(new Point(158, 431));
		inputPoints.add(new Point(33, 136));
		inputPoints.add(new Point(286, 485));
		inputPoints.add(new Point(287, 224));
		inputPoints.add(new Point(374, 315));
		inputPoints.add(new Point(316, 18));
		inputPoints.add(new Point(174, 75));
		inputPoints.add(new Point(54, 187));
		inputPoints.add(new Point(359, 330));
		inputPoints.add(new Point(339, 278));
		inputPoints.add(new Point(191, 96));
		inputPoints.add(new Point(143, 391));
		inputPoints.add(new Point(35, 139));
		inputPoints.add(new Point(272, 98));
		inputPoints.add(new Point(223, 310));
		inputPoints.add(new Point(445, 116));
		inputPoints.add(new Point(251, 492));
		inputPoints.add(new Point(277, 40));
		inputPoints.add(new Point(480, 88));
		inputPoints.add(new Point(457, 326));
		inputPoints.add(new Point(219, 406));
		inputPoints.add(new Point(367, 99));
		inputPoints.add(new Point(372, 183));
		inputPoints.add(new Point(160, 38));
		inputPoints.add(new Point(200, 321));
		inputPoints.add(new Point(107, 148));
		inputPoints.add(new Point(293, 157));
		inputPoints.add(new Point(477, 262));
		inputPoints.add(new Point(292, 290));
		inputPoints.add(new Point(276, 19));
		inputPoints.add(new Point(273, 153));
		inputPoints.add(new Point(348, 347));
		inputPoints.add(new Point(326, 325));
		inputPoints.add(new Point(78, 63));
		inputPoints.add(new Point(338, 273));
		inputPoints.add(new Point(381, 264));
		inputPoints.add(new Point(318, 398));
		inputPoints.add(new Point(389, 306));
		inputPoints.add(new Point(250, 40));
		inputPoints.add(new Point(303, 34));
		inputPoints.add(new Point(365, 449));
		inputPoints.add(new Point(347, 479));
		inputPoints.add(new Point(256, 53));
		inputPoints.add(new Point(267, 265));
		inputPoints.add(new Point(65, 486));
		inputPoints.add(new Point(58, 152));
		inputPoints.add(new Point(475, 402));
		inputPoints.add(new Point(189, 475));
		inputPoints.add(new Point(177, 455));
		inputPoints.add(new Point(174, 50));
		inputPoints.add(new Point(431, 211));
		inputPoints.add(new Point(333, 192));
		inputPoints.add(new Point(321, 14));
		inputPoints.add(new Point(177, 343));
		inputPoints.add(new Point(335, 238));
		inputPoints.add(new Point(109, 161));
		inputPoints.add(new Point(215, 81));
		inputPoints.add(new Point(13, 42));
		inputPoints.add(new Point(264, 79));
		inputPoints.add(new Point(55, 416));
		inputPoints.add(new Point(356, 379));
		inputPoints.add(new Point(377, 474));
		inputPoints.add(new Point(36, 451));
		inputPoints.add(new Point(399, 347));
		inputPoints.add(new Point(119, 169));
		inputPoints.add(new Point(100, 250));
		inputPoints.add(new Point(167, 261));
		inputPoints.add(new Point(203, 73));
		inputPoints.add(new Point(316, 407));
		inputPoints.add(new Point(397, 73));
		inputPoints.add(new Point(416, 473));
		inputPoints.add(new Point(205, 194));
		inputPoints.add(new Point(132, 456));
		inputPoints.add(new Point(43, 253));
		inputPoints.add(new Point(191, 19));
		inputPoints.add(new Point(447, 308));
		inputPoints.add(new Point(158, 400));
		inputPoints.add(new Point(7, 107));
		inputPoints.add(new Point(317, 211));
		inputPoints.add(new Point(345, 426));
		inputPoints.add(new Point(60, 352));
		inputPoints.add(new Point(484, 400));
		inputPoints.add(new Point(196, 261));
		inputPoints.add(new Point(104, 73));
		inputPoints.add(new Point(163, 338));
		inputPoints.add(new Point(248, 67));
		inputPoints.add(new Point(361, 207));
		inputPoints.add(new Point(268, 133));
		inputPoints.add(new Point(379, 184));
		inputPoints.add(new Point(148, 116));
		inputPoints.add(new Point(28, 188));
		inputPoints.add(new Point(110, 268));
		inputPoints.add(new Point(179, 491));
		inputPoints.add(new Point(58, 406));
		inputPoints.add(new Point(485, 310));
		inputPoints.add(new Point(333, 56));
		inputPoints.add(new Point(310, 94));
		inputPoints.add(new Point(156, 29));
		inputPoints.add(new Point(125, 113));
		inputPoints.add(new Point(322, 222));
		inputPoints.add(new Point(227, 25));
		inputPoints.add(new Point(434, 264));
		inputPoints.add(new Point(500, 409));
		inputPoints.add(new Point(227, 418));
		inputPoints.add(new Point(91, 443));
		inputPoints.add(new Point(470, 123));
		inputPoints.add(new Point(436, 14));
		inputPoints.add(new Point(203, 234));
		inputPoints.add(new Point(82, 60));
		inputPoints.add(new Point(106, 400));
		inputPoints.add(new Point(366, 178));
		inputPoints.add(new Point(348, 170));
		inputPoints.add(new Point(365, 63));
		inputPoints.add(new Point(288, 171));
		inputPoints.add(new Point(211, 377));
		inputPoints.add(new Point(426, 1));
		inputPoints.add(new Point(477, 3));
		inputPoints.add(new Point(133, 27));
		inputPoints.add(new Point(94, 414));
		inputPoints.add(new Point(288, 236));
		inputPoints.add(new Point(166, 89));
		inputPoints.add(new Point(131, 468));
		inputPoints.add(new Point(390, 7));
		inputPoints.add(new Point(460, 353));
		inputPoints.add(new Point(366, 172));
		inputPoints.add(new Point(392, 465));
		inputPoints.add(new Point(223, 359));
		inputPoints.add(new Point(35, 238));
		inputPoints.add(new Point(204, 93));
		inputPoints.add(new Point(227, 69));
		inputPoints.add(new Point(486, 103));
		inputPoints.add(new Point(347, 395));
		inputPoints.add(new Point(342, 352));
		inputPoints.add(new Point(260, 351));
		inputPoints.add(new Point(314, 459));
		inputPoints.add(new Point(440, 447));
		inputPoints.add(new Point(460, 129));
		inputPoints.add(new Point(96, 445));
		inputPoints.add(new Point(278, 60));
		inputPoints.add(new Point(103, 240));
		inputPoints.add(new Point(190, 223));
		inputPoints.add(new Point(201, 198));
		inputPoints.add(new Point(334, 283));
		inputPoints.add(new Point(325, 210));
		inputPoints.add(new Point(265, 463));
		inputPoints.add(new Point(146, 192));
		inputPoints.add(new Point(391, 435));
		inputPoints.add(new Point(398, 256));
		inputPoints.add(new Point(10, 202));
		inputPoints.add(new Point(361, 235));
		inputPoints.add(new Point(341, 73));
		inputPoints.add(new Point(458, 391));
		inputPoints.add(new Point(289, 316));
		inputPoints.add(new Point(155, 387));
		inputPoints.add(new Point(93, 265));
		inputPoints.add(new Point(346, 86));
		inputPoints.add(new Point(475, 171));
		inputPoints.add(new Point(348, 425));
		inputPoints.add(new Point(179, 76));
		inputPoints.add(new Point(337, 6));
		inputPoints.add(new Point(40, 499));
		inputPoints.add(new Point(357, 424));
		inputPoints.add(new Point(475, 115));
		inputPoints.add(new Point(285, 410));
		inputPoints.add(new Point(431, 330));
		inputPoints.add(new Point(218, 15));
		inputPoints.add(new Point(362, 185));
		inputPoints.add(new Point(296, 268));
		inputPoints.add(new Point(433, 250));
		inputPoints.add(new Point(436, 444));
		inputPoints.add(new Point(442, 412));
		inputPoints.add(new Point(375, 252));
		inputPoints.add(new Point(492, 216));
		inputPoints.add(new Point(78, 382));
		inputPoints.add(new Point(460, 268));
		inputPoints.add(new Point(371, 217));
		inputPoints.add(new Point(487, 372));
		inputPoints.add(new Point(7, 276));
		inputPoints.add(new Point(398, 182));
		inputPoints.add(new Point(486, 52));
		inputPoints.add(new Point(10, 56));
		inputPoints.add(new Point(452, 345));
		inputPoints.add(new Point(281, 422));
		inputPoints.add(new Point(1, 58));
		inputPoints.add(new Point(320, 176));
		inputPoints.add(new Point(407, 181));
		inputPoints.add(new Point(37, 188));
		inputPoints.add(new Point(269, 473));
		inputPoints.add(new Point(284, 198));
		inputPoints.add(new Point(480, 233));
		inputPoints.add(new Point(174, 287));
		inputPoints.add(new Point(212, 304));
		inputPoints.add(new Point(19, 8));
		inputPoints.add(new Point(74, 82));
		inputPoints.add(new Point(227, 370));
		inputPoints.add(new Point(371, 253));
		inputPoints.add(new Point(119, 351));
		inputPoints.add(new Point(208, 197));
		inputPoints.add(new Point(204, 203));
		inputPoints.add(new Point(101, 209));
		inputPoints.add(new Point(245, 90));
		inputPoints.add(new Point(158, 497));
		inputPoints.add(new Point(2, 280));
		inputPoints.add(new Point(490, 247));
		inputPoints.add(new Point(143, 115));
		inputPoints.add(new Point(370, 166));
		inputPoints.add(new Point(39, 244));
		inputPoints.add(new Point(27, 104));
		inputPoints.add(new Point(111, 367));
		inputPoints.add(new Point(75, 494));
		inputPoints.add(new Point(43, 314));
		inputPoints.add(new Point(193, 253));
		inputPoints.add(new Point(480, 132));
		inputPoints.add(new Point(72, 270));
		inputPoints.add(new Point(350, 49));
		inputPoints.add(new Point(402, 242));
		inputPoints.add(new Point(466, 132));
		inputPoints.add(new Point(123, 105));
		inputPoints.add(new Point(270, 164));
		inputPoints.add(new Point(281, 355));
		inputPoints.add(new Point(331, 408));
		inputPoints.add(new Point(97, 389));
		inputPoints.add(new Point(477, 167));
		inputPoints.add(new Point(473, 327));
		inputPoints.add(new Point(194, 268));
		inputPoints.add(new Point(356, 184));
		inputPoints.add(new Point(433, 440));
		inputPoints.add(new Point(191, 165));
		inputPoints.add(new Point(477, 360));
		inputPoints.add(new Point(169, 282));
		inputPoints.add(new Point(44, 480));
		inputPoints.add(new Point(107, 53));
		inputPoints.add(new Point(91, 288));
		inputPoints.add(new Point(72, 139));
		inputPoints.add(new Point(183, 219));
		inputPoints.add(new Point(472, 448));
		inputPoints.add(new Point(356, 359));
		inputPoints.add(new Point(455, 227));
		inputPoints.add(new Point(219, 361));
		inputPoints.add(new Point(487, 448));
		inputPoints.add(new Point(461, 472));
		inputPoints.add(new Point(301, 457));
		inputPoints.add(new Point(289, 75));
		inputPoints.add(new Point(485, 71));
		inputPoints.add(new Point(257, 349));

		desiredPoints.add(new Point(288, 0));
		desiredPoints.add(new Point(466, 0));
		desiredPoints.add(new Point(477, 3));
		desiredPoints.add(new Point(489, 8));
		desiredPoints.add(new Point(497, 36));
		desiredPoints.add(new Point(500, 154));
		desiredPoints.add(new Point(500, 455));
		desiredPoints.add(new Point(492, 491));
		desiredPoints.add(new Point(456, 500));
		desiredPoints.add(new Point(116, 500));
		desiredPoints.add(new Point(40, 499));
		desiredPoints.add(new Point(9, 493));
		desiredPoints.add(new Point(0, 477));
		desiredPoints.add(new Point(0, 281));
		desiredPoints.add(new Point(1, 4));
		desiredPoints.add(new Point(31, 1));

		convexHullTester.run(inputPoints, inputLines, inputPolygons, outputPoints, outputLines, outputPolygons);

		boolean success = CompareDesiredWithActual(desiredPoints, outputPoints);
		assertTrue("Fails in Extreme Points: Case 13 (random large set of points in large range ({0, 500}, {0, 500}))",
				success);

		// #endregion
	}
	
	// #endregion
	private boolean CompareDesiredWithActual(List<Point> _desiredPoints, List<Point> _outputPoints) {
		if (_outputPoints == null && _desiredPoints != null)
			return false;

		if (_desiredPoints.size() != _outputPoints.size())
			return false;

		for (int i = 0; i < _desiredPoints.size(); i++) {
			boolean isFound = false;

			for (int j = 0; j < _outputPoints.size(); j++)

			{
				if (_desiredPoints.get(i).equals(_outputPoints.get(j))) {
					isFound = true;
					break;
				}
			}

			if (!isFound)
				return false;
		}

		return true;
	}

}
